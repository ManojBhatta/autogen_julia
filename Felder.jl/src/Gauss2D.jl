#=
2D Gaussian quadrature points and weights taken from Appendix A in

Witherden, Freddie & Vincent, P.. (2014).
On the Identification of Symmetric Quadrature Rules for Finite Element Methods.
Computers & Mathematics with Applications. 15. 10.1016/j.camwa.2015.03.017.

Available for triangle and quadrilateral.

A rule is said to be of strength φ if it is capable of exactly integrating
any polynomial of maximal degree φ over Ω.
=#

##############################
# Triangle
##############################
#=
    (0, 1)
      ○
      ┊ ⋱
      ┊   ⋱
      ┊     ⋱
      ┊       ⋱
      ○┄┄┄┄┄┄┄┄┄○
    (0, 0)    (1, 0)

Area = 0.5
=#

# --------------------------- Strength φ = 1 ---------------------------
# Number of points: 1

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{1}) = 1

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{1}, i::Integer)::Float64
    i ==  1 && return 0.50000000000000000000000000000000000000
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{1} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{1}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334, 0.33333333333333333333333333333333333334)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{1} in AbstractTriangle"))
end

# --------------------------- Strength φ = 2 ---------------------------
# Number of points: 3

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{2}) = 3

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{2}, i::Integer)::Float64
    i ==  1 && return 0.16666666666666666666666666666666666667
    i ==  2 && return 0.16666666666666666666666666666666666667
    i ==  3 && return 0.16666666666666666666666666666666666667
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{2} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{2}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.16666666666666666666666666666666666666,   0.66666666666666666666666666666666666666)
    i ==  2 && return (0.66666666666666666666666666666666666666,   0.16666666666666666666666666666666666666)
    i ==  3 && return (0.16666666666666666666666666666666666666,   0.16666666666666666666666666666666666666)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{2} in AbstractTriangle"))
end

# --------------------------- Strength φ = 3 ---------------------------
# Number of points: 6

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{3}) = 6

function quadweight(s::Type{<:AbstractTriangle}, ::GaussQuadrature{3}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(4), i)::Float64
end

function quadpoint(s::Type{<:AbstractTriangle}, ::GaussQuadrature{3}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(4), i)
end

# --------------------------- Strength φ = 4 ---------------------------
# Number of points: 6

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{4}) = 6

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{4}, i::Integer)::Float64
    i ==  1 && return 0.11169079483900573284750350421656140218
    i ==  2 && return 0.11169079483900573284750350421656140218
    i ==  3 && return 0.11169079483900573284750350421656140218
    i ==  4 && return 0.05497587182766093381916316245010526448
    i ==  5 && return 0.05497587182766093381916316245010526448
    i ==  6 && return 0.05497587182766093381916316245010526448
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{4} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{4}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.44594849091596488631832925388305198840,   0.10810301816807022736334149223389602320)
    i ==  2 && return (0.10810301816807022736334149223389602320,   0.44594849091596488631832925388305198840)
    i ==  3 && return (0.44594849091596488631832925388305198840,   0.44594849091596488631832925388305198840)
    i ==  4 && return (0.09157621350977074345957146340220150786,   0.81684757298045851308085707319559698429)
    i ==  5 && return (0.81684757298045851308085707319559698429,   0.09157621350977074345957146340220150786)
    i ==  6 && return (0.09157621350977074345957146340220150786,   0.09157621350977074345957146340220150786)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{4} in AbstractTriangle"))
end

# --------------------------- Strength φ = 5 ---------------------------
# Number of points: 7

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{5}) = 7

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{5}, i::Integer)::Float64
    i ==  1 && return 0.11250000000000000000000000000000000000
    i ==  2 && return 0.06296959027241357629784197275009066683
    i ==  3 && return 0.06296959027241357629784197275009066683
    i ==  4 && return 0.06296959027241357629784197275009066683
    i ==  5 && return 0.06619707639425309036882469391657599984
    i ==  6 && return 0.06619707639425309036882469391657599984
    i ==  7 && return 0.06619707639425309036882469391657599984
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{5} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{5}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.10128650732345633880098736191512382805,   0.79742698535308732239802527616975234389)
    i ==  3 && return (0.79742698535308732239802527616975234389,   0.10128650732345633880098736191512382805)
    i ==  4 && return (0.10128650732345633880098736191512382805,   0.10128650732345633880098736191512382805)
    i ==  5 && return (0.47014206410511508977044120951344760052,   0.05971587178976982045911758097310479897)
    i ==  6 && return (0.05971587178976982045911758097310479897,   0.47014206410511508977044120951344760052)
    i ==  7 && return (0.47014206410511508977044120951344760052,   0.47014206410511508977044120951344760052)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{5} in AbstractTriangle"))
end

# --------------------------- Strength φ = 6 ---------------------------
# Number of points: 12

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{6}) = 12

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{6}, i::Integer)::Float64
    i ==  1 && return 0.02542245318510340846046840455343449202
    i ==  2 && return 0.02542245318510340846046840455343449202
    i ==  3 && return 0.02542245318510340846046840455343449202
    i ==  4 && return 0.05839313786318968301264480569278972066
    i ==  5 && return 0.05839313786318968301264480569278972066
    i ==  6 && return 0.05839313786318968301264480569278972066
    i ==  7 && return 0.04142553780918678759677672821022122699
    i ==  8 && return 0.04142553780918678759677672821022122699
    i ==  9 && return 0.04142553780918678759677672821022122699
    i == 10 && return 0.04142553780918678759677672821022122699
    i == 11 && return 0.04142553780918678759677672821022122699
    i == 12 && return 0.04142553780918678759677672821022122699
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{6} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{6}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.06308901449150222834033160287081915734,   0.87382197101699554331933679425836168532)
    i ==  2 && return (0.87382197101699554331933679425836168532,   0.06308901449150222834033160287081915734)
    i ==  3 && return (0.06308901449150222834033160287081915734,   0.06308901449150222834033160287081915734)
    i ==  4 && return (0.24928674517091042129163855310701907609,   0.50142650965817915741672289378596184782)
    i ==  5 && return (0.50142650965817915741672289378596184782,   0.24928674517091042129163855310701907609)
    i ==  6 && return (0.24928674517091042129163855310701907609,   0.24928674517091042129163855310701907609)
    i ==  7 && return (0.05314504984481694735324967163139814700,   0.63650249912139864723014259441204969981)
    i ==  8 && return (0.63650249912139864723014259441204969981,   0.05314504984481694735324967163139814700)
    i ==  9 && return (0.31035245103378440541660773395655215320,   0.63650249912139864723014259441204969981)
    i == 10 && return (0.63650249912139864723014259441204969981,   0.31035245103378440541660773395655215320)
    i == 11 && return (0.31035245103378440541660773395655215320,   0.05314504984481694735324967163139814700)
    i == 12 && return (0.05314504984481694735324967163139814700,   0.31035245103378440541660773395655215320)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{6} in AbstractTriangle"))
end

# --------------------------- Strength φ = 7 ---------------------------
# Number of points: 15

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{7}) = 15

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{7}, i::Integer)::Float64
    i ==  1 && return 0.00827252505539606551798897423645872281
    i ==  2 && return 0.00827252505539606551798897423645872281
    i ==  3 && return 0.00827252505539606551798897423645872281
    i ==  4 && return 0.06397208561507778639145061759232315533
    i ==  5 && return 0.06397208561507778639145061759232315533
    i ==  6 && return 0.06397208561507778639145061759232315533
    i ==  7 && return 0.03854332309299303391741076041687069323
    i ==  8 && return 0.03854332309299303391741076041687069323
    i ==  9 && return 0.03854332309299303391741076041687069323
    i == 10 && return 0.02793936645159989041990815721050704765
    i == 11 && return 0.02793936645159989041990815721050704765
    i == 12 && return 0.02793936645159989041990815721050704765
    i == 13 && return 0.02793936645159989041990815721050704765
    i == 14 && return 0.02793936645159989041990815721050704765
    i == 15 && return 0.02793936645159989041990815721050704765
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{7} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{7}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.03373064855458784871497172630081623808,   0.93253870289082430257005654739836752385)
    i ==  2 && return (0.93253870289082430257005654739836752385,   0.03373064855458784871497172630081623808)
    i ==  3 && return (0.03373064855458784871497172630081623808,   0.03373064855458784871497172630081623808)
    i ==  4 && return (0.24157738259540355895018676983778199959,   0.51684523480919288209962646032443600082)
    i ==  5 && return (0.51684523480919288209962646032443600082,   0.24157738259540355895018676983778199959)
    i ==  6 && return (0.24157738259540355895018676983778199959,   0.24157738259540355895018676983778199959)
    i ==  7 && return (0.47430969250471823420958073594918578248,   0.05138061499056353158083852810162843504)
    i ==  8 && return (0.05138061499056353158083852810162843504,   0.47430969250471823420958073594918578248)
    i ==  9 && return (0.47430969250471823420958073594918578248,   0.47430969250471823420958073594918578248)
    i == 10 && return (0.04703664465259523334140997535688497552,   0.75428004055005317735623932462811996369)
    i == 11 && return (0.75428004055005317735623932462811996369,   0.04703664465259523334140997535688497552)
    i == 12 && return (0.19868331479735158930235070001499506079,   0.75428004055005317735623932462811996369)
    i == 13 && return (0.75428004055005317735623932462811996369,   0.19868331479735158930235070001499506079)
    i == 14 && return (0.19868331479735158930235070001499506079,   0.04703664465259523334140997535688497552)
    i == 15 && return (0.04703664465259523334140997535688497552,   0.19868331479735158930235070001499506079)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{7} in AbstractTriangle"))
end

# --------------------------- Strength φ = 8 ---------------------------
# Number of points: 16

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{8}) = 16

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{8}, i::Integer)::Float64
    i ==  1 && return 0.07215780383889358412554555524453231240
    i ==  2 && return 0.04754581713364231239694805219429215830
    i ==  3 && return 0.04754581713364231239694805219429215830
    i ==  4 && return 0.04754581713364231239694805219429215830
    i ==  5 && return 0.05160868526735912514089577514606451501
    i ==  6 && return 0.05160868526735912514089577514606451501
    i ==  7 && return 0.05160868526735912514089577514606451501
    i ==  8 && return 0.01622924881159904015546296417089029840
    i ==  9 && return 0.01622924881159904015546296417089029840
    i == 10 && return 0.01622924881159904015546296417089029840
    i == 11 && return 0.01361515708721749713242234503695446208
    i == 12 && return 0.01361515708721749713242234503695446208
    i == 13 && return 0.01361515708721749713242234503695446208
    i == 14 && return 0.01361515708721749713242234503695446208
    i == 15 && return 0.01361515708721749713242234503695446208
    i == 16 && return 0.01361515708721749713242234503695446208
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{8} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{8}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.45929258829272315602881551449416932206,   0.08141482341455368794236897101166135588)
    i ==  3 && return (0.08141482341455368794236897101166135588,   0.45929258829272315602881551449416932206)
    i ==  4 && return (0.45929258829272315602881551449416932206,   0.45929258829272315602881551449416932206)
    i ==  5 && return (0.17056930775176020662229350149146450102,   0.65886138449647958675541299701707099796)
    i ==  6 && return (0.65886138449647958675541299701707099796,   0.17056930775176020662229350149146450102)
    i ==  7 && return (0.17056930775176020662229350149146450102,   0.17056930775176020662229350149146450102)
    i ==  8 && return (0.05054722831703097545842355059659894685,   0.89890554336593804908315289880680210631)
    i ==  9 && return (0.89890554336593804908315289880680210631,   0.05054722831703097545842355059659894685)
    i == 10 && return (0.05054722831703097545842355059659894685,   0.05054722831703097545842355059659894685)
    i == 11 && return (0.00839477740995760533721383453929444919,   0.72849239295540428124100037917606196302)
    i == 12 && return (0.72849239295540428124100037917606196302,   0.00839477740995760533721383453929444919)
    i == 13 && return (0.26311282963463811342178578628464358779,   0.72849239295540428124100037917606196302)
    i == 14 && return (0.72849239295540428124100037917606196302,   0.26311282963463811342178578628464358779)
    i == 15 && return (0.26311282963463811342178578628464358779,   0.00839477740995760533721383453929444919)
    i == 16 && return (0.00839477740995760533721383453929444919,   0.26311282963463811342178578628464358779)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{8} in AbstractTriangle"))
end

# --------------------------- Strength φ = 9 ---------------------------
# Number of points: 19

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{9}) = 19

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{9}, i::Integer)::Float64
    i ==  1 && return 0.04856789814139941690962099125364431487
    i ==  2 && return 0.03891377050238713965836967814970197806
    i ==  3 && return 0.03891377050238713965836967814970197806
    i ==  4 && return 0.03891377050238713965836967814970197806
    i ==  5 && return 0.03982386946360512651644588713202263662
    i ==  6 && return 0.03982386946360512651644588713202263662
    i ==  7 && return 0.03982386946360512651644588713202263662
    i ==  8 && return 0.01566735011356953526842741564360465775
    i ==  9 && return 0.01566735011356953526842741564360465775
    i == 10 && return 0.01566735011356953526842741564360465775
    i == 11 && return 0.01278883782934901563083939927949991199
    i == 12 && return 0.01278883782934901563083939927949991199
    i == 13 && return 0.01278883782934901563083939927949991199
    i == 14 && return 0.02164176968864468864468864468864468864
    i == 15 && return 0.02164176968864468864468864468864468864
    i == 16 && return 0.02164176968864468864468864468864468864
    i == 17 && return 0.02164176968864468864468864468864468864
    i == 18 && return 0.02164176968864468864468864468864468864
    i == 19 && return 0.02164176968864468864468864468864468864
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{9} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{9}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.43708959149293663726993036443535497268,   0.12582081701412672546013927112929005464)
    i ==  3 && return (0.12582081701412672546013927112929005464,   0.43708959149293663726993036443535497268)
    i ==  4 && return (0.43708959149293663726993036443535497268,   0.43708959149293663726993036443535497268)
    i ==  5 && return (0.18820353561903273024096128046733556811,   0.62359292876193453951807743906532886378)
    i ==  6 && return (0.62359292876193453951807743906532886378,   0.18820353561903273024096128046733556811)
    i ==  7 && return (0.18820353561903273024096128046733556811,   0.18820353561903273024096128046733556811)
    i ==  8 && return (0.48968251919873762778370692483619279937,   0.02063496160252474443258615032761440126)
    i ==  9 && return (0.02063496160252474443258615032761440126,   0.48968251919873762778370692483619279937)
    i == 10 && return (0.48968251919873762778370692483619279937,   0.48968251919873762778370692483619279937)
    i == 11 && return (0.04472951339445270986510658996627636500,   0.91054097321109458026978682006744727000)
    i == 12 && return (0.91054097321109458026978682006744727000,   0.04472951339445270986510658996627636500)
    i == 13 && return (0.04472951339445270986510658996627636500,   0.04472951339445270986510658996627636500)
    i == 14 && return (0.03683841205473628363481759878338510231,   0.74119859878449802069007987352342382744)
    i == 15 && return (0.74119859878449802069007987352342382744,   0.03683841205473628363481759878338510231)
    i == 16 && return (0.22196298916076569567510252769319107025,   0.74119859878449802069007987352342382744)
    i == 17 && return (0.74119859878449802069007987352342382744,   0.22196298916076569567510252769319107025)
    i == 18 && return (0.22196298916076569567510252769319107025,   0.03683841205473628363481759878338510231)
    i == 19 && return (0.03683841205473628363481759878338510231,   0.22196298916076569567510252769319107025)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{9} in AbstractTriangle"))
end

# --------------------------- Strength φ = 10 ---------------------------
# Number of points: 25

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{10}) = 25

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{10}, i::Integer)::Float64
    i ==  1 && return 0.04087166457314298321405934249208880610
    i ==  2 && return 0.00667648440657478313778648919953432675
    i ==  3 && return 0.00667648440657478313778648919953432675
    i ==  4 && return 0.00667648440657478313778648919953432675
    i ==  5 && return 0.02297898180237236400689395481627390820
    i ==  6 && return 0.02297898180237236400689395481627390820
    i ==  7 && return 0.02297898180237236400689395481627390820
    i ==  8 && return 0.03195245319821202271644936688132666093
    i ==  9 && return 0.03195245319821202271644936688132666093
    i == 10 && return 0.03195245319821202271644936688132666093
    i == 11 && return 0.03195245319821202271644936688132666093
    i == 12 && return 0.03195245319821202271644936688132666093
    i == 13 && return 0.03195245319821202271644936688132666093
    i == 14 && return 0.01709232408147971431434579202067114513
    i == 15 && return 0.01709232408147971431434579202067114513
    i == 16 && return 0.01709232408147971431434579202067114513
    i == 17 && return 0.01709232408147971431434579202067114513
    i == 18 && return 0.01709232408147971431434579202067114513
    i == 19 && return 0.01709232408147971431434579202067114513
    i == 20 && return 0.01264887885364419219452139534141660878
    i == 21 && return 0.01264887885364419219452139534141660878
    i == 22 && return 0.01264887885364419219452139534141660878
    i == 23 && return 0.01264887885364419219452139534141660878
    i == 24 && return 0.01264887885364419219452139534141660878
    i == 25 && return 0.01264887885364419219452139534141660878
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{10} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{10}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.03205537321694351293098458933648973897,   0.93588925356611297413803082132702052207)
    i ==  3 && return (0.93588925356611297413803082132702052207,   0.03205537321694351293098458933648973897)
    i ==  4 && return (0.03205537321694351293098458933648973897,   0.03205537321694351293098458933648973897)
    i ==  5 && return (0.14216110105656438509216210319095832172,   0.71567779788687122981567579361808335656)
    i ==  6 && return (0.71567779788687122981567579361808335656,   0.14216110105656438509216210319095832172)
    i ==  7 && return (0.14216110105656438509216210319095832172,   0.14216110105656438509216210319095832172)
    i ==  8 && return (0.32181299528883542122509756098604871373,   0.53005411892734402827709567394569411689)
    i ==  9 && return (0.53005411892734402827709567394569411689,   0.32181299528883542122509756098604871373)
    i == 10 && return (0.14813288578382055049780676506825716938,   0.53005411892734402827709567394569411689)
    i == 11 && return (0.53005411892734402827709567394569411689,   0.14813288578382055049780676506825716938)
    i == 12 && return (0.14813288578382055049780676506825716938,   0.32181299528883542122509756098604871373)
    i == 13 && return (0.32181299528883542122509756098604871373,   0.14813288578382055049780676506825716938)
    i == 14 && return (0.02961988948872976763383626942604280053,   0.60123332868345924545474289345868780938)
    i == 15 && return (0.60123332868345924545474289345868780938,   0.02961988948872976763383626942604280053)
    i == 16 && return (0.36914678182781098691142083711526939010,   0.60123332868345924545474289345868780938)
    i == 17 && return (0.60123332868345924545474289345868780938,   0.36914678182781098691142083711526939010)
    i == 18 && return (0.36914678182781098691142083711526939010,   0.02961988948872976763383626942604280053)
    i == 19 && return (0.02961988948872976763383626942604280053,   0.36914678182781098691142083711526939010)
    i == 20 && return (0.02836766533993843925043575557813020560,   0.80793060092287906507994990288174410907)
    i == 21 && return (0.80793060092287906507994990288174410907,   0.02836766533993843925043575557813020560)
    i == 22 && return (0.16370173373718249566961434154012568534,   0.80793060092287906507994990288174410907)
    i == 23 && return (0.80793060092287906507994990288174410907,   0.16370173373718249566961434154012568534)
    i == 24 && return (0.16370173373718249566961434154012568534,   0.02836766533993843925043575557813020560)
    i == 25 && return (0.02836766533993843925043575557813020560,   0.16370173373718249566961434154012568534)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{10} in AbstractTriangle"))
end

# --------------------------- Strength φ = 11 ---------------------------
# Number of points: 28

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{11}) = 28

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{11}, i::Integer)::Float64
    i ==  1 && return 0.04288058986611210856909956268266349724
    i ==  2 && return 0.00521593525644734793651424604933115843
    i ==  3 && return 0.00521593525644734793651424604933115843
    i ==  4 && return 0.00521593525644734793651424604933115843
    i ==  5 && return 0.03525784205585828917103692958646418491
    i ==  6 && return 0.03525784205585828917103692958646418491
    i ==  7 && return 0.03525784205585828917103692958646418491
    i ==  8 && return 0.01931537961850966123831690229470057457
    i ==  9 && return 0.01931537961850966123831690229470057457
    i == 10 && return 0.01931537961850966123831690229470057457
    i == 11 && return 0.00830313652729268478818791963752803043
    i == 12 && return 0.00830313652729268478818791963752803043
    i == 13 && return 0.00830313652729268478818791963752803043
    i == 14 && return 0.03365807703973415059891860281164389294
    i == 15 && return 0.03365807703973415059891860281164389294
    i == 16 && return 0.03365807703973415059891860281164389294
    i == 17 && return 0.00514514478647663874654031374198976486
    i == 18 && return 0.00514514478647663874654031374198976486
    i == 19 && return 0.00514514478647663874654031374198976486
    i == 20 && return 0.00514514478647663874654031374198976486
    i == 21 && return 0.00514514478647663874654031374198976486
    i == 22 && return 0.00514514478647663874654031374198976486
    i == 23 && return 0.02016623832025027629212245895439906496
    i == 24 && return 0.02016623832025027629212245895439906496
    i == 25 && return 0.02016623832025027629212245895439906496
    i == 26 && return 0.02016623832025027629212245895439906496
    i == 27 && return 0.02016623832025027629212245895439906496
    i == 28 && return 0.02016623832025027629212245895439906496
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{11} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{11}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.02848541761437190947981636680509049067,   0.94302916477125618104036726638981901865)
    i ==  3 && return (0.94302916477125618104036726638981901865,   0.02848541761437190947981636680509049067)
    i ==  4 && return (0.02848541761437190947981636680509049067,   0.02848541761437190947981636680509049067)
    i ==  5 && return (0.21021995670317825700806226834579261013,   0.57956008659364348598387546330841477973)
    i ==  6 && return (0.57956008659364348598387546330841477973,   0.21021995670317825700806226834579261013)
    i ==  7 && return (0.21021995670317825700806226834579261013,   0.21021995670317825700806226834579261013)
    i ==  8 && return (0.10263548271224643044911506988494416203,   0.79472903457550713910176986023011167595)
    i ==  9 && return (0.79472903457550713910176986023011167595,   0.10263548271224643044911506988494416203)
    i == 10 && return (0.10263548271224643044911506988494416203,   0.10263548271224643044911506988494416203)
    i == 11 && return (0.49589190096589091306494011900361599264,   0.00821619806821817387011976199276801473)
    i == 12 && return (0.00821619806821817387011976199276801473,   0.49589190096589091306494011900361599264)
    i == 13 && return (0.49589190096589091306494011900361599264,   0.49589190096589091306494011900361599264)
    i == 14 && return (0.43846592676435219102333586284251945417,   0.12306814647129561795332827431496109167)
    i == 15 && return (0.12306814647129561795332827431496109167,   0.43846592676435219102333586284251945417)
    i == 16 && return (0.43846592676435219102333586284251945417,   0.43846592676435219102333586284251945417)
    i == 17 && return (0.14932478865208238619572578787717352263,   0.84334978366185316219899143639882493054)
    i == 18 && return (0.84334978366185316219899143639882493054,   0.14932478865208238619572578787717352263)
    i == 19 && return (0.00732542768606445160528277572400154684,   0.84334978366185316219899143639882493054)
    i == 20 && return (0.84334978366185316219899143639882493054,   0.00732542768606445160528277572400154684)
    i == 21 && return (0.00732542768606445160528277572400154684,   0.14932478865208238619572578787717352263)
    i == 22 && return (0.14932478865208238619572578787717352263,   0.00732542768606445160528277572400154684)
    i == 23 && return (0.04601050016542995588995977629486725512,   0.66440837419686419740354767633251578615)
    i == 24 && return (0.66440837419686419740354767633251578615,   0.04601050016542995588995977629486725512)
    i == 25 && return (0.28958112563770584670649254737261695873,   0.66440837419686419740354767633251578615)
    i == 26 && return (0.66440837419686419740354767633251578615,   0.28958112563770584670649254737261695873)
    i == 27 && return (0.28958112563770584670649254737261695873,   0.04601050016542995588995977629486725512)
    i == 28 && return (0.04601050016542995588995977629486725512,   0.28958112563770584670649254737261695873)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{11} in AbstractTriangle"))
end

# --------------------------- Strength φ = 12 ---------------------------
# Number of points: 33

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{12}) = 33

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{12}, i::Integer)::Float64
    i ==  1 && return 0.01213341904072601657535898628780404195
    i ==  2 && return 0.01213341904072601657535898628780404195
    i ==  3 && return 0.01213341904072601657535898628780404195
    i ==  4 && return 0.01424302603443877249984723695375772313
    i ==  5 && return 0.01424302603443877249984723695375772313
    i ==  6 && return 0.01424302603443877249984723695375772313
    i ==  7 && return 0.03127060659795138023466189072275991956
    i ==  8 && return 0.03127060659795138023466189072275991956
    i ==  9 && return 0.03127060659795138023466189072275991956
    i == 10 && return 0.00396582125498681922965739395292986724
    i == 11 && return 0.00396582125498681922965739395292986724
    i == 12 && return 0.00396582125498681922965739395292986724
    i == 13 && return 0.02495916746403047105952586103049715048
    i == 14 && return 0.02495916746403047105952586103049715048
    i == 15 && return 0.02495916746403047105952586103049715048
    i == 16 && return 0.01089179251930377896631571816964591093
    i == 17 && return 0.01089179251930377896631571816964591093
    i == 18 && return 0.01089179251930377896631571816964591093
    i == 19 && return 0.01089179251930377896631571816964591093
    i == 20 && return 0.01089179251930377896631571816964591093
    i == 21 && return 0.01089179251930377896631571816964591093
    i == 22 && return 0.02161368182970710527456663545842961482
    i == 23 && return 0.02161368182970710527456663545842961482
    i == 24 && return 0.02161368182970710527456663545842961482
    i == 25 && return 0.02161368182970710527456663545842961482
    i == 26 && return 0.02161368182970710527456663545842961482
    i == 27 && return 0.02161368182970710527456663545842961482
    i == 28 && return 0.00754183878825571929292529523138345640
    i == 29 && return 0.00754183878825571929292529523138345640
    i == 30 && return 0.00754183878825571929292529523138345640
    i == 31 && return 0.00754183878825571929292529523138345640
    i == 32 && return 0.00754183878825571929292529523138345640
    i == 33 && return 0.00754183878825571929292529523138345640
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{12} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{12}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.48820375094554155177800812386881475692,   0.02359249810891689644398375226237048615)
    i ==  2 && return (0.02359249810891689644398375226237048615,   0.48820375094554155177800812386881475692)
    i ==  3 && return (0.48820375094554155177800812386881475692,   0.48820375094554155177800812386881475692)
    i ==  4 && return (0.10925782765935429058374731200430874531,   0.78148434468129141883250537599138250938)
    i ==  5 && return (0.78148434468129141883250537599138250938,   0.10925782765935429058374731200430874531)
    i ==  6 && return (0.10925782765935429058374731200430874531,   0.10925782765935429058374731200430874531)
    i ==  7 && return (0.27146250701492608487799594802254509853,   0.45707498597014783024400810395490980293)
    i ==  8 && return (0.45707498597014783024400810395490980293,   0.27146250701492608487799594802254509853)
    i ==  9 && return (0.27146250701492608487799594802254509853,   0.27146250701492608487799594802254509853)
    i == 10 && return (0.02464636343633559476673119721433457820,   0.95070727312732881046653760557133084359)
    i == 11 && return (0.95070727312732881046653760557133084359,   0.02464636343633559476673119721433457820)
    i == 12 && return (0.02464636343633559476673119721433457820,   0.02464636343633559476673119721433457820)
    i == 13 && return (0.44011164865859311101345370307290819105,   0.11977670268281377797309259385418361790)
    i == 14 && return (0.11977670268281377797309259385418361790,   0.44011164865859311101345370307290819105)
    i == 15 && return (0.44011164865859311101345370307290819105,   0.44011164865859311101345370307290819105)
    i == 16 && return (0.29165567973834096053391381193394061719,   0.68531016390639189998444468613713025070)
    i == 17 && return (0.68531016390639189998444468613713025070,   0.29165567973834096053391381193394061719)
    i == 18 && return (0.02303415635526713948164150192892913212,   0.68531016390639189998444468613713025070)
    i == 19 && return (0.68531016390639189998444468613713025070,   0.02303415635526713948164150192892913212)
    i == 20 && return (0.02303415635526713948164150192892913212,   0.29165567973834096053391381193394061719)
    i == 21 && return (0.29165567973834096053391381193394061719,   0.02303415635526713948164150192892913212)
    i == 22 && return (0.11629601967792658663074813414970113890,   0.62824975168355606683789613836722919837)
    i == 23 && return (0.62824975168355606683789613836722919837,   0.11629601967792658663074813414970113890)
    i == 24 && return (0.25545422863851734653135572748306966273,   0.62824975168355606683789613836722919837)
    i == 25 && return (0.62824975168355606683789613836722919837,   0.25545422863851734653135572748306966273)
    i == 26 && return (0.25545422863851734653135572748306966273,   0.11629601967792658663074813414970113890)
    i == 27 && return (0.11629601967792658663074813414970113890,   0.25545422863851734653135572748306966273)
    i == 28 && return (0.85133779251024004161800361043205844859,   0.12727971723358936878784187474738233893)
    i == 29 && return (0.12727971723358936878784187474738233893,   0.85133779251024004161800361043205844859)
    i == 30 && return (0.02138249025617058959415451482055921247,   0.12727971723358936878784187474738233893)
    i == 31 && return (0.12727971723358936878784187474738233893,   0.02138249025617058959415451482055921247)
    i == 32 && return (0.02138249025617058959415451482055921247,   0.85133779251024004161800361043205844859)
    i == 33 && return (0.85133779251024004161800361043205844859,   0.02138249025617058959415451482055921247)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{12} in AbstractTriangle"))
end

# --------------------------- Strength φ = 13 ---------------------------
# Number of points: 37

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{13}) = 37

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{13}, i::Integer)::Float64
    i ==  1 && return 0.03398001829341582214088721234044243976
    i ==  2 && return 0.01199720096444736538685539972547982686
    i ==  3 && return 0.01199720096444736538685539972547982686
    i ==  4 && return 0.01199720096444736538685539972547982686
    i ==  5 && return 0.02913924255959999070238354175666990476
    i ==  6 && return 0.02913924255959999070238354175666990476
    i ==  7 && return 0.02913924255959999070238354175666990476
    i ==  8 && return 0.02780098376522666435362873300523073377
    i ==  9 && return 0.02780098376522666435362873300523073377
    i == 10 && return 0.02780098376522666435362873300523073377
    i == 11 && return 0.00302616855176958592089640001614541223
    i == 12 && return 0.00302616855176958592089640001614541223
    i == 13 && return 0.00302616855176958592089640001614541223
    i == 14 && return 0.01208951990579690956872287278653037965
    i == 15 && return 0.01208951990579690956872287278653037965
    i == 16 && return 0.01208951990579690956872287278653037965
    i == 17 && return 0.01208951990579690956872287278653037965
    i == 18 && return 0.01208951990579690956872287278653037965
    i == 19 && return 0.01208951990579690956872287278653037965
    i == 20 && return 0.00748270055258283363162292856645171900
    i == 21 && return 0.00748270055258283363162292856645171900
    i == 22 && return 0.00748270055258283363162292856645171900
    i == 23 && return 0.00748270055258283363162292856645171900
    i == 24 && return 0.00748270055258283363162292856645171900
    i == 25 && return 0.00748270055258283363162292856645171900
    i == 26 && return 0.01732063807042418523299341425545911022
    i == 27 && return 0.01732063807042418523299341425545911022
    i == 28 && return 0.01732063807042418523299341425545911022
    i == 29 && return 0.01732063807042418523299341425545911022
    i == 30 && return 0.01732063807042418523299341425545911022
    i == 31 && return 0.01732063807042418523299341425545911022
    i == 32 && return 0.00479534050177163136129754508305544569
    i == 33 && return 0.00479534050177163136129754508305544569
    i == 34 && return 0.00479534050177163136129754508305544569
    i == 35 && return 0.00479534050177163136129754508305544569
    i == 36 && return 0.00479534050177163136129754508305544569
    i == 37 && return 0.00479534050177163136129754508305544569
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{13} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{13}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.48907694645253934990068971909020438765,   0.02184610709492130019862056181959122469)
    i ==  3 && return (0.02184610709492130019862056181959122469,   0.48907694645253934990068971909020438765)
    i ==  4 && return (0.48907694645253934990068971909020438765,   0.48907694645253934990068971909020438765)
    i ==  5 && return (0.22137228629183290065481255470507907776,   0.55725542741633419869037489058984184448)
    i ==  6 && return (0.55725542741633419869037489058984184448,   0.22137228629183290065481255470507907776)
    i ==  7 && return (0.22137228629183290065481255470507907776,   0.22137228629183290065481255470507907776)
    i ==  8 && return (0.42694141425980040602081253503137421141,   0.14611717148039918795837492993725157719)
    i ==  9 && return (0.14611717148039918795837492993725157719,   0.42694141425980040602081253503137421141)
    i == 10 && return (0.42694141425980040602081253503137421141,   0.42694141425980040602081253503137421141)
    i == 11 && return (0.02150968110884318386929131353405208260,   0.95698063778231363226141737293189583480)
    i == 12 && return (0.95698063778231363226141737293189583480,   0.02150968110884318386929131353405208260)
    i == 13 && return (0.02150968110884318386929131353405208260,   0.02150968110884318386929131353405208260)
    i == 14 && return (0.08789548303219732459309350250033310112,   0.74850711589995219517301859578870965004)
    i == 15 && return (0.74850711589995219517301859578870965004,   0.08789548303219732459309350250033310112)
    i == 16 && return (0.16359740106785048023388790171095724884,   0.74850711589995219517301859578870965004)
    i == 17 && return (0.74850711589995219517301859578870965004,   0.16359740106785048023388790171095724884)
    i == 18 && return (0.16359740106785048023388790171095724884,   0.08789548303219732459309350250033310112)
    i == 19 && return (0.08789548303219732459309350250033310112,   0.16359740106785048023388790171095724884)
    i == 20 && return (0.11092204280346339541286954522167452178,   0.86470777029544277530254595089569318333)
    i == 21 && return (0.86470777029544277530254595089569318333,   0.11092204280346339541286954522167452178)
    i == 22 && return (0.02437018690109382928458450388263229489,   0.86470777029544277530254595089569318333)
    i == 23 && return (0.86470777029544277530254595089569318333,   0.02437018690109382928458450388263229489)
    i == 24 && return (0.02437018690109382928458450388263229489,   0.11092204280346339541286954522167452178)
    i == 25 && return (0.11092204280346339541286954522167452178,   0.02437018690109382928458450388263229489)
    i == 26 && return (0.30844176089211777465847185254124530972,   0.62354599555367557081585435318623658583)
    i == 27 && return (0.62354599555367557081585435318623658583,   0.30844176089211777465847185254124530972)
    i == 28 && return (0.06801224355420665452567379427251810445,   0.62354599555367557081585435318623658583)
    i == 29 && return (0.62354599555367557081585435318623658583,   0.06801224355420665452567379427251810445)
    i == 30 && return (0.06801224355420665452567379427251810445,   0.30844176089211777465847185254124530972)
    i == 31 && return (0.30844176089211777465847185254124530972,   0.06801224355420665452567379427251810445)
    i == 32 && return (0.00512638910238236855932940334112910598,   0.72235779312418796526062013230478404863)
    i == 33 && return (0.72235779312418796526062013230478404863,   0.00512638910238236855932940334112910598)
    i == 34 && return (0.27251581777342966618005046435408684540,   0.72235779312418796526062013230478404863)
    i == 35 && return (0.72235779312418796526062013230478404863,   0.27251581777342966618005046435408684540)
    i == 36 && return (0.27251581777342966618005046435408684540,   0.00512638910238236855932940334112910598)
    i == 37 && return (0.00512638910238236855932940334112910598,   0.27251581777342966618005046435408684540)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{13} in AbstractTriangle"))
end

# --------------------------- Strength φ = 14 ---------------------------
# Number of points: 42

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{14}) = 42

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{14}, i::Integer)::Float64
    i ==  1 && return 0.02108129436849650876911521866209306492
    i ==  2 && return 0.02108129436849650876911521866209306492
    i ==  3 && return 0.02108129436849650876911521866209306492
    i ==  4 && return 0.01639417677206267532065548936931267162
    i ==  5 && return 0.01639417677206267532065548936931267162
    i ==  6 && return 0.01639417677206267532065548936931267162
    i ==  7 && return 0.00721684983488833380085496074032665831
    i ==  8 && return 0.00721684983488833380085496074032665831
    i ==  9 && return 0.00721684983488833380085496074032665831
    i == 10 && return 0.01094179068471444532042247298166298577
    i == 11 && return 0.01094179068471444532042247298166298577
    i == 12 && return 0.01094179068471444532042247298166298577
    i == 13 && return 0.02588705225364579315739245508319820121
    i == 14 && return 0.02588705225364579315739245508319820121
    i == 15 && return 0.02588705225364579315739245508319820121
    i == 16 && return 0.00246170180120004084091301175452107738
    i == 17 && return 0.00246170180120004084091301175452107738
    i == 18 && return 0.00246170180120004084091301175452107738
    i == 19 && return 0.00721815405676692024804434599950790172
    i == 20 && return 0.00721815405676692024804434599950790172
    i == 21 && return 0.00721815405676692024804434599950790172
    i == 22 && return 0.00721815405676692024804434599950790172
    i == 23 && return 0.00721815405676692024804434599950790172
    i == 24 && return 0.00721815405676692024804434599950790172
    i == 25 && return 0.01233287660628183698143762259181811416
    i == 26 && return 0.01233287660628183698143762259181811416
    i == 27 && return 0.01233287660628183698143762259181811416
    i == 28 && return 0.01233287660628183698143762259181811416
    i == 29 && return 0.01233287660628183698143762259181811416
    i == 30 && return 0.01233287660628183698143762259181811416
    i == 31 && return 0.01928575539353034161424451390520542962
    i == 32 && return 0.01928575539353034161424451390520542962
    i == 33 && return 0.01928575539353034161424451390520542962
    i == 34 && return 0.01928575539353034161424451390520542962
    i == 35 && return 0.01928575539353034161424451390520542962
    i == 36 && return 0.01928575539353034161424451390520542962
    i == 37 && return 0.00250511441925033588493004654124455823
    i == 38 && return 0.00250511441925033588493004654124455823
    i == 39 && return 0.00250511441925033588493004654124455823
    i == 40 && return 0.00250511441925033588493004654124455823
    i == 41 && return 0.00250511441925033588493004654124455823
    i == 42 && return 0.00250511441925033588493004654124455823
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{14} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{14}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.17720553241254343695661069046505907608,   0.64558893517491312608677861906988184783)
    i ==  2 && return (0.64558893517491312608677861906988184783,   0.17720553241254343695661069046505907608)
    i ==  3 && return (0.17720553241254343695661069046505907608,   0.17720553241254343695661069046505907608)
    i ==  4 && return (0.41764471934045392250944082218564343911,   0.16471056131909215498111835562871312178)
    i ==  5 && return (0.16471056131909215498111835562871312178,   0.41764471934045392250944082218564343911)
    i ==  6 && return (0.41764471934045392250944082218564343911,   0.41764471934045392250944082218564343911)
    i ==  7 && return (0.06179988309087260126747882843693578838,   0.87640023381825479746504234312612842324)
    i ==  8 && return (0.87640023381825479746504234312612842324,   0.06179988309087260126747882843693578838)
    i ==  9 && return (0.06179988309087260126747882843693578838,   0.06179988309087260126747882843693578838)
    i == 10 && return (0.48896391036217863867737602045239023579,   0.02207217927564272264524795909521952841)
    i == 11 && return (0.02207217927564272264524795909521952841,   0.48896391036217863867737602045239023579)
    i == 12 && return (0.48896391036217863867737602045239023579,   0.48896391036217863867737602045239023579)
    i == 13 && return (0.27347752830883865975494428326269855620,   0.45304494338232268049011143347460288761)
    i == 14 && return (0.45304494338232268049011143347460288761,   0.27347752830883865975494428326269855620)
    i == 15 && return (0.27347752830883865975494428326269855620,   0.27347752830883865975494428326269855620)
    i == 16 && return (0.01939096124870104817825009505452951107,   0.96121807750259790364349980989094097785)
    i == 17 && return (0.96121807750259790364349980989094097785,   0.01939096124870104817825009505452951107)
    i == 18 && return (0.01939096124870104817825009505452951107,   0.01939096124870104817825009505452951107)
    i == 19 && return (0.29837288213625775297083151805961272859,   0.68698016780808783735862715402031305976)
    i == 20 && return (0.68698016780808783735862715402031305976,   0.29837288213625775297083151805961272859)
    i == 21 && return (0.01464695005565440967054132792007421166,   0.68698016780808783735862715402031305976)
    i == 22 && return (0.68698016780808783735862715402031305976,   0.01464695005565440967054132792007421166)
    i == 23 && return (0.01464695005565440967054132792007421166,   0.29837288213625775297083151805961272859)
    i == 24 && return (0.29837288213625775297083151805961272859,   0.01464695005565440967054132792007421166)
    i == 25 && return (0.05712475740364793903567712421891471031,   0.77060855477499648258903327416742795632)
    i == 26 && return (0.77060855477499648258903327416742795632,   0.05712475740364793903567712421891471031)
    i == 27 && return (0.17226668782135557837528960161365733335,   0.77060855477499648258903327416742795632)
    i == 28 && return (0.77060855477499648258903327416742795632,   0.17226668782135557837528960161365733335)
    i == 29 && return (0.17226668782135557837528960161365733335,   0.05712475740364793903567712421891471031)
    i == 30 && return (0.05712475740364793903567712421891471031,   0.17226668782135557837528960161365733335)
    i == 31 && return (0.33686145979634500174405519708892538906,   0.57022229084668317349769621336235425964)
    i == 32 && return (0.57022229084668317349769621336235425964,   0.33686145979634500174405519708892538906)
    i == 33 && return (0.09291624935697182475824858954872035130,   0.57022229084668317349769621336235425964)
    i == 34 && return (0.57022229084668317349769621336235425964,   0.09291624935697182475824858954872035130)
    i == 35 && return (0.09291624935697182475824858954872035130,   0.33686145979634500174405519708892538906)
    i == 36 && return (0.33686145979634500174405519708892538906,   0.09291624935697182475824858954872035130)
    i == 37 && return (0.00126833093287202508724640109549269268,   0.87975717137017112951457163697460182601)
    i == 38 && return (0.87975717137017112951457163697460182601,   0.00126833093287202508724640109549269268)
    i == 39 && return (0.11897449769695684539818196192990548133,   0.87975717137017112951457163697460182601)
    i == 40 && return (0.87975717137017112951457163697460182601,   0.11897449769695684539818196192990548133)
    i == 41 && return (0.11897449769695684539818196192990548133,   0.00126833093287202508724640109549269268)
    i == 42 && return (0.00126833093287202508724640109549269268,   0.11897449769695684539818196192990548133)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{14} in AbstractTriangle"))
end

# --------------------------- Strength φ = 15 ---------------------------
# Number of points: 49

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{15}) = 49

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{15}, i::Integer)::Float64
    i ==  1 && return 0.02216769369109203769379967032851620199
    i ==  2 && return 0.02135689078573028352068145968641709017
    i ==  3 && return 0.02135689078573028352068145968641709017
    i ==  4 && return 0.02135689078573028352068145968641709017
    i ==  5 && return 0.00822236878131258188434000434425456473
    i ==  6 && return 0.00822236878131258188434000434425456473
    i ==  7 && return 0.00822236878131258188434000434425456473
    i ==  8 && return 0.00869807400038170727886327544212737666
    i ==  9 && return 0.00869807400038170727886327544212737666
    i == 10 && return 0.00869807400038170727886327544212737666
    i == 11 && return 0.02339168086435481617813444739038711959
    i == 12 && return 0.02339168086435481617813444739038711959
    i == 13 && return 0.02339168086435481617813444739038711959
    i == 14 && return 0.00478692309123004310328462681329677935
    i == 15 && return 0.00478692309123004310328462681329677935
    i == 16 && return 0.00478692309123004310328462681329677935
    i == 17 && return 0.00148038731895268778463815131918246969
    i == 18 && return 0.00148038731895268778463815131918246969
    i == 19 && return 0.00148038731895268778463815131918246969
    i == 20 && return 0.00780128641528798237588745791425021158
    i == 21 && return 0.00780128641528798237588745791425021158
    i == 22 && return 0.00780128641528798237588745791425021158
    i == 23 && return 0.00780128641528798237588745791425021158
    i == 24 && return 0.00780128641528798237588745791425021158
    i == 25 && return 0.00780128641528798237588745791425021158
    i == 26 && return 0.00201492668600904980918216745542825391
    i == 27 && return 0.00201492668600904980918216745542825391
    i == 28 && return 0.00201492668600904980918216745542825391
    i == 29 && return 0.00201492668600904980918216745542825391
    i == 30 && return 0.00201492668600904980918216745542825391
    i == 31 && return 0.00201492668600904980918216745542825391
    i == 32 && return 0.01436029346260067011533282083582542800
    i == 33 && return 0.01436029346260067011533282083582542800
    i == 34 && return 0.01436029346260067011533282083582542800
    i == 35 && return 0.01436029346260067011533282083582542800
    i == 36 && return 0.01436029346260067011533282083582542800
    i == 37 && return 0.01436029346260067011533282083582542800
    i == 38 && return 0.00583631059078792266978850277216829296
    i == 39 && return 0.00583631059078792266978850277216829296
    i == 40 && return 0.00583631059078792266978850277216829296
    i == 41 && return 0.00583631059078792266978850277216829296
    i == 42 && return 0.00583631059078792266978850277216829296
    i == 43 && return 0.00583631059078792266978850277216829296
    i == 44 && return 0.01565773814248464220587145680307574644
    i == 45 && return 0.01565773814248464220587145680307574644
    i == 46 && return 0.01565773814248464220587145680307574644
    i == 47 && return 0.01565773814248464220587145680307574644
    i == 48 && return 0.01565773814248464220587145680307574644
    i == 49 && return 0.01565773814248464220587145680307574644
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{15} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{15}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.40536221413397547786675611071975085896,   0.18927557173204904426648777856049828207)
    i ==  3 && return (0.18927557173204904426648777856049828207,   0.40536221413397547786675611071975085896)
    i ==  4 && return (0.40536221413397547786675611071975085896,   0.40536221413397547786675611071975085896)
    i ==  5 && return (0.07017355289998601748435975214342860464,   0.85965289420002796503128049571314279073)
    i ==  6 && return (0.85965289420002796503128049571314279073,   0.07017355289998601748435975214342860464)
    i ==  7 && return (0.07017355289998601748435975214342860464,   0.07017355289998601748435975214342860464)
    i ==  8 && return (0.47417068143801979197869069527410590587,   0.05165863712396041604261860945178818825)
    i ==  9 && return (0.05165863712396041604261860945178818825,   0.47417068143801979197869069527410590587)
    i == 10 && return (0.47417068143801979197869069527410590587,   0.47417068143801979197869069527410590587)
    i == 11 && return (0.22637871342034959829072558108461930273,   0.54724257315930080341854883783076139455)
    i == 12 && return (0.54724257315930080341854883783076139455,   0.22637871342034959829072558108461930273)
    i == 13 && return (0.22637871342034959829072558108461930273,   0.22637871342034959829072558108461930273)
    i == 14 && return (0.49499695676912618423779964768391085895,   0.01000608646174763152440070463217828210)
    i == 15 && return (0.01000608646174763152440070463217828210,   0.49499695676912618423779964768391085895)
    i == 16 && return (0.49499695676912618423779964768391085895,   0.49499695676912618423779964768391085895)
    i == 17 && return (0.01581172625098864555895173378386753015,   0.96837654749802270888209653243226493969)
    i == 18 && return (0.96837654749802270888209653243226493969,   0.01581172625098864555895173378386753015)
    i == 19 && return (0.01581172625098864555895173378386753015,   0.01581172625098864555895173378386753015)
    i == 20 && return (0.01837611238568109196104439558139591830,   0.66697564480186808994632353920371210007)
    i == 21 && return (0.66697564480186808994632353920371210007,   0.01837611238568109196104439558139591830)
    i == 22 && return (0.31464824281245081809263206521489198163,   0.66697564480186808994632353920371210007)
    i == 23 && return (0.66697564480186808994632353920371210007,   0.31464824281245081809263206521489198163)
    i == 24 && return (0.31464824281245081809263206521489198163,   0.01837611238568109196104439558139591830)
    i == 25 && return (0.01837611238568109196104439558139591830,   0.31464824281245081809263206521489198163)
    i == 26 && return (0.00913923703730839503655181749098651810,   0.91991215772623606490286059529679237396)
    i == 27 && return (0.91991215772623606490286059529679237396,   0.00913923703730839503655181749098651810)
    i == 28 && return (0.07094860523645554006058758721222110794,   0.91991215772623606490286059529679237396)
    i == 29 && return (0.91991215772623606490286059529679237396,   0.07094860523645554006058758721222110794)
    i == 30 && return (0.07094860523645554006058758721222110794,   0.00913923703730839503655181749098651810)
    i == 31 && return (0.00913923703730839503655181749098651810,   0.07094860523645554006058758721222110794)
    i == 32 && return (0.19053558947639393343069024968596414015,   0.71522235693145070188397936878373044166)
    i == 33 && return (0.71522235693145070188397936878373044166,   0.19053558947639393343069024968596414015)
    i == 34 && return (0.09424205359215536468533038153030541818,   0.71522235693145070188397936878373044166)
    i == 35 && return (0.71522235693145070188397936878373044166,   0.09424205359215536468533038153030541818)
    i == 36 && return (0.09424205359215536468533038153030541818,   0.19053558947639393343069024968596414015)
    i == 37 && return (0.19053558947639393343069024968596414015,   0.09424205359215536468533038153030541818)
    i == 38 && return (0.16806864522241435546477758858362946061,   0.81329264104941926991225831301335796862)
    i == 39 && return (0.81329264104941926991225831301335796862,   0.16806864522241435546477758858362946061)
    i == 40 && return (0.01863871372816637462296409840301257078,   0.81329264104941926991225831301335796862)
    i == 41 && return (0.81329264104941926991225831301335796862,   0.01863871372816637462296409840301257078)
    i == 42 && return (0.01863871372816637462296409840301257078,   0.16806864522241435546477758858362946061)
    i == 43 && return (0.16806864522241435546477758858362946061,   0.01863871372816637462296409840301257078)
    i == 44 && return (0.33895061147527718921459300467045198206,   0.56525266487711421445185193436675628753)
    i == 45 && return (0.56525266487711421445185193436675628753,   0.33895061147527718921459300467045198206)
    i == 46 && return (0.09579672364760859633355506096279173040,   0.56525266487711421445185193436675628753)
    i == 47 && return (0.56525266487711421445185193436675628753,   0.09579672364760859633355506096279173040)
    i == 48 && return (0.09579672364760859633355506096279173040,   0.33895061147527718921459300467045198206)
    i == 49 && return (0.33895061147527718921459300467045198206,   0.09579672364760859633355506096279173040)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{15} in AbstractTriangle"))
end

# --------------------------- Strength φ = 16 ---------------------------
# Number of points: 55

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{16}) = 55

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{16}, i::Integer)::Float64
    i ==  1 && return 0.02263228303690939644967070118787447647
    i ==  2 && return 0.02054646157184947477071495943596158746
    i ==  3 && return 0.02054646157184947477071495943596158746
    i ==  4 && return 0.02054646157184947477071495943596158746
    i ==  5 && return 0.02035591665621267962618190115247305786
    i ==  6 && return 0.02035591665621267962618190115247305786
    i ==  7 && return 0.02035591665621267962618190115247305786
    i ==  8 && return 0.00739081734511220199009109380160968169
    i ==  9 && return 0.00739081734511220199009109380160968169
    i == 10 && return 0.00739081734511220199009109380160968169
    i == 11 && return 0.01470920484949404893030567611139135288
    i == 12 && return 0.01470920484949404893030567611139135288
    i == 13 && return 0.01470920484949404893030567611139135288
    i == 14 && return 0.00220927315607528446269211589457730454
    i == 15 && return 0.00220927315607528446269211589457730454
    i == 16 && return 0.00220927315607528446269211589457730454
    i == 17 && return 0.01298716664913857916015114592351672024
    i == 18 && return 0.01298716664913857916015114592351672024
    i == 19 && return 0.01298716664913857916015114592351672024
    i == 20 && return 0.00946913623220784948477310690335470451
    i == 21 && return 0.00946913623220784948477310690335470451
    i == 22 && return 0.00946913623220784948477310690335470451
    i == 23 && return 0.00946913623220784948477310690335470451
    i == 24 && return 0.00946913623220784948477310690335470451
    i == 25 && return 0.00946913623220784948477310690335470451
    i == 26 && return 0.00082723335741752409619790697405110771
    i == 27 && return 0.00082723335741752409619790697405110771
    i == 28 && return 0.00082723335741752409619790697405110771
    i == 29 && return 0.00082723335741752409619790697405110771
    i == 30 && return 0.00082723335741752409619790697405110771
    i == 31 && return 0.00082723335741752409619790697405110771
    i == 32 && return 0.00750430089214290304128424113042873749
    i == 33 && return 0.00750430089214290304128424113042873749
    i == 34 && return 0.00750430089214290304128424113042873749
    i == 35 && return 0.00750430089214290304128424113042873749
    i == 36 && return 0.00750430089214290304128424113042873749
    i == 37 && return 0.00750430089214290304128424113042873749
    i == 38 && return 0.00397379696669624940529979905452702338
    i == 39 && return 0.00397379696669624940529979905452702338
    i == 40 && return 0.00397379696669624940529979905452702338
    i == 41 && return 0.00397379696669624940529979905452702338
    i == 42 && return 0.00397379696669624940529979905452702338
    i == 43 && return 0.00397379696669624940529979905452702338
    i == 44 && return 0.01599180503968503439240703082196655737
    i == 45 && return 0.01599180503968503439240703082196655737
    i == 46 && return 0.01599180503968503439240703082196655737
    i == 47 && return 0.01599180503968503439240703082196655737
    i == 48 && return 0.01599180503968503439240703082196655737
    i == 49 && return 0.01599180503968503439240703082196655737
    i == 50 && return 0.00269559355842440570169101875792793780
    i == 51 && return 0.00269559355842440570169101875792793780
    i == 52 && return 0.00269559355842440570169101875792793780
    i == 53 && return 0.00269559355842440570169101875792793780
    i == 54 && return 0.00269559355842440570169101875792793780
    i == 55 && return 0.00269559355842440570169101875792793780
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{16} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{16}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.24599007046714173447171777976708017950,   0.50801985906571653105656444046583964100)
    i ==  3 && return (0.50801985906571653105656444046583964100,   0.24599007046714173447171777976708017950)
    i ==  4 && return (0.24599007046714173447171777976708017950,   0.24599007046714173447171777976708017950)
    i ==  5 && return (0.41558489688542051322098067618401273570,   0.16883020622915897355803864763197452860)
    i ==  6 && return (0.16883020622915897355803864763197452860,   0.41558489688542051322098067618401273570)
    i ==  7 && return (0.41558489688542051322098067618401273570,   0.41558489688542051322098067618401273570)
    i ==  8 && return (0.08535556658670032175532488552136530110,   0.82928886682659935648935022895726939779)
    i ==  9 && return (0.82928886682659935648935022895726939779,   0.08535556658670032175532488552136530110)
    i == 10 && return (0.08535556658670032175532488552136530110,   0.08535556658670032175532488552136530110)
    i == 11 && return (0.16191864419127122687688326701234243558,   0.67616271161745754624623346597531512883)
    i == 12 && return (0.67616271161745754624623346597531512883,   0.16191864419127122687688326701234243558)
    i == 13 && return (0.16191864419127122687688326701234243558,   0.16191864419127122687688326701234243558)
    i == 14 && return (0.50000000000000000000000000000000000000,   0.00000000000000000000000000000000000000)
    i == 15 && return (0.00000000000000000000000000000000000000,   0.50000000000000000000000000000000000000)
    i == 16 && return (0.50000000000000000000000000000000000000,   0.50000000000000000000000000000000000000)
    i == 17 && return (0.47528072754594210408825779053451195503,   0.04943854490811579182348441893097608995)
    i == 18 && return (0.04943854490811579182348441893097608995,   0.47528072754594210408825779053451195503)
    i == 19 && return (0.47528072754594210408825779053451195503,   0.47528072754594210408825779053451195503)
    i == 20 && return (0.05475517491470311289172371139658370514,   0.75417006144476780785498903662914527501)
    i == 21 && return (0.75417006144476780785498903662914527501,   0.05475517491470311289172371139658370514)
    i == 22 && return (0.19107476364052907925328725197427101984,   0.75417006144476780785498903662914527501)
    i == 23 && return (0.75417006144476780785498903662914527501,   0.19107476364052907925328725197427101984)
    i == 24 && return (0.19107476364052907925328725197427101984,   0.05475517491470311289172371139658370514)
    i == 25 && return (0.05475517491470311289172371139658370514,   0.19107476364052907925328725197427101984)
    i == 26 && return (0.02320342776881370903748854127160039319,   0.96824436803095867918459759420812598942)
    i == 27 && return (0.96824436803095867918459759420812598942,   0.02320342776881370903748854127160039319)
    i == 28 && return (0.00855220420022761177791386452027361740,   0.96824436803095867918459759420812598942)
    i == 29 && return (0.96824436803095867918459759420812598942,   0.00855220420022761177791386452027361740)
    i == 30 && return (0.00855220420022761177791386452027361740,   0.02320342776881370903748854127160039319)
    i == 31 && return (0.02320342776881370903748854127160039319,   0.00855220420022761177791386452027361740)
    i == 32 && return (0.01893177828040591498171527052738816285,   0.64930369824544640812962649578190798474)
    i == 33 && return (0.64930369824544640812962649578190798474,   0.01893177828040591498171527052738816285)
    i == 34 && return (0.33176452347414767688865823369070385240,   0.64930369824544640812962649578190798474)
    i == 35 && return (0.64930369824544640812962649578190798474,   0.33176452347414767688865823369070385240)
    i == 36 && return (0.33176452347414767688865823369070385240,   0.01893177828040591498171527052738816285)
    i == 37 && return (0.01893177828040591498171527052738816285,   0.33176452347414767688865823369070385240)
    i == 38 && return (0.01903012974369744879093521215748173968,   0.90027370327042962613700691719387182762)
    i == 39 && return (0.90027370327042962613700691719387182762,   0.01903012974369744879093521215748173968)
    i == 40 && return (0.08069616698587292507205787064864643270,   0.90027370327042962613700691719387182762)
    i == 41 && return (0.90027370327042962613700691719387182762,   0.08069616698587292507205787064864643270)
    i == 42 && return (0.08069616698587292507205787064864643270,   0.01903012974369744879093521215748173968)
    i == 43 && return (0.01903012974369744879093521215748173968,   0.08069616698587292507205787064864643270)
    i == 44 && return (0.10260619023939809630172485161457177296,   0.58914884056424791879028670062842782164)
    i == 45 && return (0.58914884056424791879028670062842782164,   0.10260619023939809630172485161457177296)
    i == 46 && return (0.30824496919635398490798844775700040540,   0.58914884056424791879028670062842782164)
    i == 47 && return (0.58914884056424791879028670062842782164,   0.30824496919635398490798844775700040540)
    i == 48 && return (0.30824496919635398490798844775700040540,   0.10260619023939809630172485161457177296)
    i == 49 && return (0.10260619023939809630172485161457177296,   0.30824496919635398490798844775700040540)
    i == 50 && return (0.00593635001682226990748196761065801600,   0.80662186749939564245143032630706468879)
    i == 51 && return (0.80662186749939564245143032630706468879,   0.00593635001682226990748196761065801600)
    i == 52 && return (0.18744178248378208764108770608227729521,   0.80662186749939564245143032630706468879)
    i == 53 && return (0.80662186749939564245143032630706468879,   0.18744178248378208764108770608227729521)
    i == 54 && return (0.18744178248378208764108770608227729521,   0.00593635001682226990748196761065801600)
    i == 55 && return (0.00593635001682226990748196761065801600,   0.18744178248378208764108770608227729521)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{16} in AbstractTriangle"))
end

# --------------------------- Strength φ = 17 ---------------------------
# Number of points: 60

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{17}) = 60

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{17}, i::Integer)::Float64
    i ==  1 && return 0.01365546326405105376188942377701487117
    i ==  2 && return 0.01365546326405105376188942377701487117
    i ==  3 && return 0.01365546326405105376188942377701487117
    i ==  4 && return 0.00138694378881882107730624629616482248
    i ==  5 && return 0.00138694378881882107730624629616482248
    i ==  6 && return 0.00138694378881882107730624629616482248
    i ==  7 && return 0.01250972547524867889852876508819136363
    i ==  8 && return 0.01250972547524867889852876508819136363
    i ==  9 && return 0.01250972547524867889852876508819136363
    i == 10 && return 0.01315631529400899247801720758678982636
    i == 11 && return 0.01315631529400899247801720758678982636
    i == 12 && return 0.01315631529400899247801720758678982636
    i == 13 && return 0.00622950040115272104762502143270684176
    i == 14 && return 0.00622950040115272104762502143270684176
    i == 15 && return 0.00622950040115272104762502143270684176
    i == 16 && return 0.01885811857639764000821440298397761488
    i == 17 && return 0.01885811857639764000821440298397761488
    i == 18 && return 0.01885811857639764000821440298397761488
    i == 19 && return 0.00398915010296479666214131107253276245
    i == 20 && return 0.00398915010296479666214131107253276245
    i == 21 && return 0.00398915010296479666214131107253276245
    i == 22 && return 0.00398915010296479666214131107253276245
    i == 23 && return 0.00398915010296479666214131107253276245
    i == 24 && return 0.00398915010296479666214131107253276245
    i == 25 && return 0.01124388627334553322116107789008450149
    i == 26 && return 0.01124388627334553322116107789008450149
    i == 27 && return 0.01124388627334553322116107789008450149
    i == 28 && return 0.01124388627334553322116107789008450149
    i == 29 && return 0.01124388627334553322116107789008450149
    i == 30 && return 0.01124388627334553322116107789008450149
    i == 31 && return 0.00519921997791976823181428268904413699
    i == 32 && return 0.00519921997791976823181428268904413699
    i == 33 && return 0.00519921997791976823181428268904413699
    i == 34 && return 0.00519921997791976823181428268904413699
    i == 35 && return 0.00519921997791976823181428268904413699
    i == 36 && return 0.00519921997791976823181428268904413699
    i == 37 && return 0.01027894916022725874800291479071096207
    i == 38 && return 0.01027894916022725874800291479071096207
    i == 39 && return 0.01027894916022725874800291479071096207
    i == 40 && return 0.01027894916022725874800291479071096207
    i == 41 && return 0.01027894916022725874800291479071096207
    i == 42 && return 0.01027894916022725874800291479071096207
    i == 43 && return 0.00434610725050059578438696272024786832
    i == 44 && return 0.00434610725050059578438696272024786832
    i == 45 && return 0.00434610725050059578438696272024786832
    i == 46 && return 0.00434610725050059578438696272024786832
    i == 47 && return 0.00434610725050059578438696272024786832
    i == 48 && return 0.00434610725050059578438696272024786832
    i == 49 && return 0.00229217420086793342147480368538980040
    i == 50 && return 0.00229217420086793342147480368538980040
    i == 51 && return 0.00229217420086793342147480368538980040
    i == 52 && return 0.00229217420086793342147480368538980040
    i == 53 && return 0.00229217420086793342147480368538980040
    i == 54 && return 0.00229217420086793342147480368538980040
    i == 55 && return 0.01308581296766849362856144690290063146
    i == 56 && return 0.01308581296766849362856144690290063146
    i == 57 && return 0.01308581296766849362856144690290063146
    i == 58 && return 0.01308581296766849362856144690290063146
    i == 59 && return 0.01308581296766849362856144690290063146
    i == 60 && return 0.01308581296766849362856144690290063146
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{17} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{17}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.41710344436159920160512291637199961661,   0.16579311127680159678975416725600076679)
    i ==  2 && return (0.16579311127680159678975416725600076679,   0.41710344436159920160512291637199961661)
    i ==  3 && return (0.41710344436159920160512291637199961661,   0.41710344436159920160512291637199961661)
    i ==  4 && return (0.01475549166075395340315417930079530092,   0.97048901667849209319369164139840939815)
    i ==  5 && return (0.97048901667849209319369164139840939815,   0.01475549166075395340315417930079530092)
    i ==  6 && return (0.01475549166075395340315417930079530092,   0.01475549166075395340315417930079530092)
    i ==  7 && return (0.46559787161889030189589159084693772874,   0.06880425676221939620821681830612454251)
    i ==  8 && return (0.06880425676221939620821681830612454251,   0.46559787161889030189589159084693772874)
    i ==  9 && return (0.46559787161889030189589159084693772874,   0.46559787161889030189589159084693772874)
    i == 10 && return (0.18035811626637062018584307222938043894,   0.63928376746725875962831385554123912214)
    i == 11 && return (0.63928376746725875962831385554123912214,   0.18035811626637062018584307222938043894)
    i == 12 && return (0.18035811626637062018584307222938043894,   0.18035811626637062018584307222938043894)
    i == 13 && return (0.06665406347959692975676674839849884700,   0.86669187304080614048646650320300230601)
    i == 14 && return (0.86669187304080614048646650320300230601,   0.06665406347959692975676674839849884700)
    i == 15 && return (0.06665406347959692975676674839849884700,   0.06665406347959692975676674839849884700)
    i == 16 && return (0.28570650243658662800183787874469202090,   0.42858699512682674399632424251061595821)
    i == 17 && return (0.42858699512682674399632424251061595821,   0.28570650243658662800183787874469202090)
    i == 18 && return (0.28570650243658662800183787874469202090,   0.28570650243658662800183787874469202090)
    i == 19 && return (0.01601764236211929684240731213326478653,   0.82479007016508802443429060818082012285)
    i == 20 && return (0.82479007016508802443429060818082012285,   0.01601764236211929684240731213326478653)
    i == 21 && return (0.15919228747279267872330207968591509061,   0.82479007016508802443429060818082012285)
    i == 22 && return (0.82479007016508802443429060818082012285,   0.15919228747279267872330207968591509061)
    i == 23 && return (0.15919228747279267872330207968591509061,   0.01601764236211929684240731213326478653)
    i == 24 && return (0.01601764236211929684240731213326478653,   0.15919228747279267872330207968591509061)
    i == 25 && return (0.30628159174618654153530949385487337257,   0.62636903038645226206872230279781232519)
    i == 26 && return (0.62636903038645226206872230279781232519,   0.30628159174618654153530949385487337257)
    i == 27 && return (0.06734937786736119639596820334731430224,   0.62636903038645226206872230279781232519)
    i == 28 && return (0.62636903038645226206872230279781232519,   0.06734937786736119639596820334731430224)
    i == 29 && return (0.06734937786736119639596820334731430224,   0.30628159174618654153530949385487337257)
    i == 30 && return (0.30628159174618654153530949385487337257,   0.06734937786736119639596820334731430224)
    i == 31 && return (0.01322967276008689330701671334910558697,   0.57129486794468405185064911169595859742)
    i == 32 && return (0.57129486794468405185064911169595859742,   0.01322967276008689330701671334910558697)
    i == 33 && return (0.41547545929522905484233417495493581561,   0.57129486794468405185064911169595859742)
    i == 34 && return (0.57129486794468405185064911169595859742,   0.41547545929522905484233417495493581561)
    i == 35 && return (0.41547545929522905484233417495493581561,   0.01322967276008689330701671334910558697)
    i == 36 && return (0.01322967276008689330701671334910558697,   0.41547545929522905484233417495493581561)
    i == 37 && return (0.07804234056828242417133087051931311511,   0.75323514593645811889642739911435989934)
    i == 38 && return (0.75323514593645811889642739911435989934,   0.07804234056828242417133087051931311511)
    i == 39 && return (0.16872251349525945693224173036632698555,   0.75323514593645811889642739911435989934)
    i == 40 && return (0.75323514593645811889642739911435989934,   0.16872251349525945693224173036632698555)
    i == 41 && return (0.16872251349525945693224173036632698555,   0.07804234056828242417133087051931311511)
    i == 42 && return (0.07804234056828242417133087051931311511,   0.16872251349525945693224173036632698555)
    i == 43 && return (0.01313587083400269496660363942996967265,   0.71507225911064246151592462037636302199)
    i == 44 && return (0.71507225911064246151592462037636302199,   0.01313587083400269496660363942996967265)
    i == 45 && return (0.27179187005535484351747174019366730535,   0.71507225911064246151592462037636302199)
    i == 46 && return (0.71507225911064246151592462037636302199,   0.27179187005535484351747174019366730535)
    i == 47 && return (0.27179187005535484351747174019366730535,   0.01313587083400269496660363942996967265)
    i == 48 && return (0.01313587083400269496660363942996967265,   0.27179187005535484351747174019366730535)
    i == 49 && return (0.01157517590318061534804211840161445890,   0.91591935329781695837743223913914333962)
    i == 50 && return (0.91591935329781695837743223913914333962,   0.01157517590318061534804211840161445890)
    i == 51 && return (0.07250547079900242627452564245924220148,   0.91591935329781695837743223913914333962)
    i == 52 && return (0.91591935329781695837743223913914333962,   0.07250547079900242627452564245924220148)
    i == 53 && return (0.07250547079900242627452564245924220148,   0.01157517590318061534804211840161445890)
    i == 54 && return (0.01157517590318061534804211840161445890,   0.07250547079900242627452564245924220148)
    i == 55 && return (0.15750547792686990502761091552370071432,   0.54327557959615977410464839969024233379)
    i == 56 && return (0.54327557959615977410464839969024233379,   0.15750547792686990502761091552370071432)
    i == 57 && return (0.29921894247697032086774068478605695189,   0.54327557959615977410464839969024233379)
    i == 58 && return (0.54327557959615977410464839969024233379,   0.29921894247697032086774068478605695189)
    i == 59 && return (0.29921894247697032086774068478605695189,   0.15750547792686990502761091552370071432)
    i == 60 && return (0.15750547792686990502761091552370071432,   0.29921894247697032086774068478605695189)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{17} in AbstractTriangle"))
end

# --------------------------- Strength φ = 18 ---------------------------
# Number of points: 67

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{18}) = 67

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{18}, i::Integer)::Float64
    i ==  1 && return 0.01817786765071333308399710074403783010
    i ==  2 && return 0.01665223501669506764270775512831246936
    i ==  3 && return 0.01665223501669506764270775512831246936
    i ==  4 && return 0.01665223501669506764270775512831246936
    i ==  5 && return 0.00602332381699985505921339532670096734
    i ==  6 && return 0.00602332381699985505921339532670096734
    i ==  7 && return 0.00602332381699985505921339532670096734
    i ==  8 && return 0.00947458575338943301304618112589569020
    i ==  9 && return 0.00947458575338943301304618112589569020
    i == 10 && return 0.00947458575338943301304618112589569020
    i == 11 && return 0.01823754470447181851707232397932367261
    i == 12 && return 0.01823754470447181851707232397932367261
    i == 13 && return 0.01823754470447181851707232397932367261
    i == 14 && return 0.00356466300985948533888207740273474777
    i == 15 && return 0.00356466300985948533888207740273474777
    i == 16 && return 0.00356466300985948533888207740273474777
    i == 17 && return 0.00827957997600162458402902799481545485
    i == 18 && return 0.00827957997600162458402902799481545485
    i == 19 && return 0.00827957997600162458402902799481545485
    i == 20 && return 0.00687980811747110261895976160459244335
    i == 21 && return 0.00687980811747110261895976160459244335
    i == 22 && return 0.00687980811747110261895976160459244335
    i == 23 && return 0.00687980811747110261895976160459244335
    i == 24 && return 0.00687980811747110261895976160459244335
    i == 25 && return 0.00687980811747110261895976160459244335
    i == 26 && return 0.01189095545007641497579584855579398864
    i == 27 && return 0.01189095545007641497579584855579398864
    i == 28 && return 0.01189095545007641497579584855579398864
    i == 29 && return 0.01189095545007641497579584855579398864
    i == 30 && return 0.01189095545007641497579584855579398864
    i == 31 && return 0.01189095545007641497579584855579398864
    i == 32 && return 0.00226526725112853269960227723978238960
    i == 33 && return 0.00226526725112853269960227723978238960
    i == 34 && return 0.00226526725112853269960227723978238960
    i == 35 && return 0.00226526725112853269960227723978238960
    i == 36 && return 0.00226526725112853269960227723978238960
    i == 37 && return 0.00226526725112853269960227723978238960
    i == 38 && return 0.00342005505980359074511387901916239381
    i == 39 && return 0.00342005505980359074511387901916239381
    i == 40 && return 0.00342005505980359074511387901916239381
    i == 41 && return 0.00342005505980359074511387901916239381
    i == 42 && return 0.00342005505980359074511387901916239381
    i == 43 && return 0.00342005505980359074511387901916239381
    i == 44 && return 0.00887374455101020255819748111542274184
    i == 45 && return 0.00887374455101020255819748111542274184
    i == 46 && return 0.00887374455101020255819748111542274184
    i == 47 && return 0.00887374455101020255819748111542274184
    i == 48 && return 0.00887374455101020255819748111542274184
    i == 49 && return 0.00887374455101020255819748111542274184
    i == 50 && return 0.00250533043728986085193531784847051324
    i == 51 && return 0.00250533043728986085193531784847051324
    i == 52 && return 0.00250533043728986085193531784847051324
    i == 53 && return 0.00250533043728986085193531784847051324
    i == 54 && return 0.00250533043728986085193531784847051324
    i == 55 && return 0.00250533043728986085193531784847051324
    i == 56 && return 0.00061147406348054488960901204874893559
    i == 57 && return 0.00061147406348054488960901204874893559
    i == 58 && return 0.00061147406348054488960901204874893559
    i == 59 && return 0.00061147406348054488960901204874893559
    i == 60 && return 0.00061147406348054488960901204874893559
    i == 61 && return 0.00061147406348054488960901204874893559
    i == 62 && return 0.01274108765591221973597819196512878785
    i == 63 && return 0.01274108765591221973597819196512878785
    i == 64 && return 0.01274108765591221973597819196512878785
    i == 65 && return 0.01274108765591221973597819196512878785
    i == 66 && return 0.01274108765591221973597819196512878785
    i == 67 && return 0.01274108765591221973597819196512878785
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{18} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{18}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.39995562806757623168036612176980638826,   0.20008874386484753663926775646038722348)
    i ==  3 && return (0.20008874386484753663926775646038722348,   0.39995562806757623168036612176980638826)
    i ==  4 && return (0.39995562806757623168036612176980638826,   0.39995562806757623168036612176980638826)
    i ==  5 && return (0.48758030157486956231318553270010322767,   0.02483939685026087537362893459979354466)
    i ==  6 && return (0.02483939685026087537362893459979354466,   0.48758030157486956231318553270010322767)
    i ==  7 && return (0.48758030157486956231318553270010322767,   0.48758030157486956231318553270010322767)
    i ==  8 && return (0.46180950640644923136871293779183706788,   0.07638098718710153726257412441632586424)
    i ==  9 && return (0.07638098718710153726257412441632586424,   0.46180950640644923136871293779183706788)
    i == 10 && return (0.46180950640644923136871293779183706788,   0.46180950640644923136871293779183706788)
    i == 11 && return (0.24226470251427196220493923329713947561,   0.51547059497145607559012153340572104878)
    i == 12 && return (0.51547059497145607559012153340572104878,   0.24226470251427196220493923329713947561)
    i == 13 && return (0.24226470251427196220493923329713947561,   0.24226470251427196220493923329713947561)
    i == 14 && return (0.03883025608868559471022082029913089559,   0.92233948782262881057955835940173820882)
    i == 15 && return (0.92233948782262881057955835940173820882,   0.03883025608868559471022082029913089559)
    i == 16 && return (0.03883025608868559471022082029913089559,   0.03883025608868559471022082029913089559)
    i == 17 && return (0.09194774212164319673588439450168153456,   0.81610451575671360652823121099663693088)
    i == 18 && return (0.81610451575671360652823121099663693088,   0.09194774212164319673588439450168153456)
    i == 19 && return (0.09194774212164319673588439450168153456,   0.09194774212164319673588439450168153456)
    i == 20 && return (0.04580491585986078112859209250595773954,   0.77037237621467521322930995750584212274)
    i == 21 && return (0.77037237621467521322930995750584212274,   0.04580491585986078112859209250595773954)
    i == 22 && return (0.18382270792546400564209794998820013771,   0.77037237621467521322930995750584212274)
    i == 23 && return (0.77037237621467521322930995750584212274,   0.18382270792546400564209794998820013771)
    i == 24 && return (0.18382270792546400564209794998820013771,   0.04580491585986078112859209250595773954)
    i == 25 && return (0.04580491585986078112859209250595773954,   0.18382270792546400564209794998820013771)
    i == 26 && return (0.20634925743383793341934518517557742511,   0.67095398519423451316115569776700109380)
    i == 27 && return (0.67095398519423451316115569776700109380,   0.20634925743383793341934518517557742511)
    i == 28 && return (0.12269675737192755341949911705742148109,   0.67095398519423451316115569776700109380)
    i == 29 && return (0.67095398519423451316115569776700109380,   0.12269675737192755341949911705742148109)
    i == 30 && return (0.12269675737192755341949911705742148109,   0.20634925743383793341934518517557742511)
    i == 31 && return (0.20634925743383793341934518517557742511,   0.12269675737192755341949911705742148109)
    i == 32 && return (0.00389761103347338253692169134281066202,   0.60041895463425691476586296812040094731)
    i == 33 && return (0.60041895463425691476586296812040094731,   0.00389761103347338253692169134281066202)
    i == 34 && return (0.39568343433226970269721534053678839067,   0.60041895463425691476586296812040094731)
    i == 35 && return (0.60041895463425691476586296812040094731,   0.39568343433226970269721534053678839067)
    i == 36 && return (0.39568343433226970269721534053678839067,   0.00389761103347338253692169134281066202)
    i == 37 && return (0.00389761103347338253692169134281066202,   0.39568343433226970269721534053678839067)
    i == 38 && return (0.01346201674144498921436010509628825028,   0.87834218946752171775585035167782832395)
    i == 39 && return (0.87834218946752171775585035167782832395,   0.01346201674144498921436010509628825028)
    i == 40 && return (0.10819579379103329302978954322588342577,   0.87834218946752171775585035167782832395)
    i == 41 && return (0.87834218946752171775585035167782832395,   0.10819579379103329302978954322588342577)
    i == 42 && return (0.10819579379103329302978954322588342577,   0.01346201674144498921436010509628825028)
    i == 43 && return (0.01346201674144498921436010509628825028,   0.10819579379103329302978954322588342577)
    i == 44 && return (0.04026028346990806314438360240254574393,   0.63998809200471459491104629333818977616)
    i == 45 && return (0.63998809200471459491104629333818977616,   0.04026028346990806314438360240254574393)
    i == 46 && return (0.31975162452537734194457010425926447991,   0.63998809200471459491104629333818977616)
    i == 47 && return (0.63998809200471459491104629333818977616,   0.31975162452537734194457010425926447991)
    i == 48 && return (0.31975162452537734194457010425926447991,   0.04026028346990806314438360240254574393)
    i == 49 && return (0.04026028346990806314438360240254574393,   0.31975162452537734194457010425926447991)
    i == 50 && return (0.00529833518660976530078710089623529360,   0.75892947985519849404514945383436125971)
    i == 51 && return (0.75892947985519849404514945383436125971,   0.00529833518660976530078710089623529360)
    i == 52 && return (0.23577218495819174065406344526940344668,   0.75892947985519849404514945383436125971)
    i == 53 && return (0.75892947985519849404514945383436125971,   0.23577218495819174065406344526940344668)
    i == 54 && return (0.23577218495819174065406344526940344668,   0.00529833518660976530078710089623529360)
    i == 55 && return (0.00529833518660976530078710089623529360,   0.23577218495819174065406344526940344668)
    i == 56 && return (0.00054836004204231899241800977468699333,   0.97236072896279566678179863005817276777)
    i == 57 && return (0.97236072896279566678179863005817276777,   0.00054836004204231899241800977468699333)
    i == 58 && return (0.02709091099516201422578336016714023890,   0.97236072896279566678179863005817276777)
    i == 59 && return (0.97236072896279566678179863005817276777,   0.02709091099516201422578336016714023890)
    i == 60 && return (0.02709091099516201422578336016714023890,   0.00054836004204231899241800977468699333)
    i == 61 && return (0.00054836004204231899241800977468699333,   0.02709091099516201422578336016714023890)
    i == 62 && return (0.12058769516392464317678505321064375293,   0.54591877538619459980869402107592716639)
    i == 63 && return (0.54591877538619459980869402107592716639,   0.12058769516392464317678505321064375293)
    i == 64 && return (0.33349352944988075701452092571342908068,   0.54591877538619459980869402107592716639)
    i == 65 && return (0.54591877538619459980869402107592716639,   0.33349352944988075701452092571342908068)
    i == 66 && return (0.33349352944988075701452092571342908068,   0.12058769516392464317678505321064375293)
    i == 67 && return (0.12058769516392464317678505321064375293,   0.33349352944988075701452092571342908068)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{18} in AbstractTriangle"))
end

# --------------------------- Strength φ = 19 ---------------------------
# Number of points: 73

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{19}) = 73

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{19}, i::Integer)::Float64
    i ==  1 && return 0.01723469885200616745300660422842853751
    i ==  2 && return 0.00355462829889906526885954873609530563
    i ==  3 && return 0.00355462829889906526885954873609530563
    i ==  4 && return 0.00355462829889906526885954873609530563
    i ==  5 && return 0.00516087757147214084484381787782492394
    i ==  6 && return 0.00516087757147214084484381787782492394
    i ==  7 && return 0.00516087757147214084484381787782492394
    i ==  8 && return 0.00761717554650914979060790449265384113
    i ==  9 && return 0.00761717554650914979060790449265384113
    i == 10 && return 0.00761717554650914979060790449265384113
    i == 11 && return 0.01149179501337080311515508438639851003
    i == 12 && return 0.01149179501337080311515508438639851003
    i == 13 && return 0.01149179501337080311515508438639851003
    i == 14 && return 0.01576876744657748753826259744082180746
    i == 15 && return 0.01576876744657748753826259744082180746
    i == 16 && return 0.01576876744657748753826259744082180746
    i == 17 && return 0.01232595742409542664525679008202183289
    i == 18 && return 0.01232595742409542664525679008202183289
    i == 19 && return 0.01232595742409542664525679008202183289
    i == 20 && return 0.00088266138822142382986212944747370909
    i == 21 && return 0.00088266138822142382986212944747370909
    i == 22 && return 0.00088266138822142382986212944747370909
    i == 23 && return 0.01587650968300153848547436124983518127
    i == 24 && return 0.01587650968300153848547436124983518127
    i == 25 && return 0.01587650968300153848547436124983518127
    i == 26 && return 0.00484774224342752289946486661428347065
    i == 27 && return 0.00484774224342752289946486661428347065
    i == 28 && return 0.00484774224342752289946486661428347065
    i == 29 && return 0.00484774224342752289946486661428347065
    i == 30 && return 0.00484774224342752289946486661428347065
    i == 31 && return 0.00484774224342752289946486661428347065
    i == 32 && return 0.01317316098869536659259074942251614909
    i == 33 && return 0.01317316098869536659259074942251614909
    i == 34 && return 0.01317316098869536659259074942251614909
    i == 35 && return 0.01317316098869536659259074942251614909
    i == 36 && return 0.01317316098869536659259074942251614909
    i == 37 && return 0.01317316098869536659259074942251614909
    i == 38 && return 0.00164103827591790962797267086558321500
    i == 39 && return 0.00164103827591790962797267086558321500
    i == 40 && return 0.00164103827591790962797267086558321500
    i == 41 && return 0.00164103827591790962797267086558321500
    i == 42 && return 0.00164103827591790962797267086558321500
    i == 43 && return 0.00164103827591790962797267086558321500
    i == 44 && return 0.00905397246560622503232628184928334981
    i == 45 && return 0.00905397246560622503232628184928334981
    i == 46 && return 0.00905397246560622503232628184928334981
    i == 47 && return 0.00905397246560622503232628184928334981
    i == 48 && return 0.00905397246560622503232628184928334981
    i == 49 && return 0.00905397246560622503232628184928334981
    i == 50 && return 0.00146315755173510020307341442452849360
    i == 51 && return 0.00146315755173510020307341442452849360
    i == 52 && return 0.00146315755173510020307341442452849360
    i == 53 && return 0.00146315755173510020307341442452849360
    i == 54 && return 0.00146315755173510020307341442452849360
    i == 55 && return 0.00146315755173510020307341442452849360
    i == 56 && return 0.00805108138201205410499600674132189555
    i == 57 && return 0.00805108138201205410499600674132189555
    i == 58 && return 0.00805108138201205410499600674132189555
    i == 59 && return 0.00805108138201205410499600674132189555
    i == 60 && return 0.00805108138201205410499600674132189555
    i == 61 && return 0.00805108138201205410499600674132189555
    i == 62 && return 0.00422794374976824840876053522679547178
    i == 63 && return 0.00422794374976824840876053522679547178
    i == 64 && return 0.00422794374976824840876053522679547178
    i == 65 && return 0.00422794374976824840876053522679547178
    i == 66 && return 0.00422794374976824840876053522679547178
    i == 67 && return 0.00422794374976824840876053522679547178
    i == 68 && return 0.00166360068142969412948659062772064254
    i == 69 && return 0.00166360068142969412948659062772064254
    i == 70 && return 0.00166360068142969412948659062772064254
    i == 71 && return 0.00166360068142969412948659062772064254
    i == 72 && return 0.00166360068142969412948659062772064254
    i == 73 && return 0.00166360068142969412948659062772064254
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{19} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{19}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.05252389035120896701475650602243668854,   0.89495221929758206597048698795512662292)
    i ==  3 && return (0.89495221929758206597048698795512662292,   0.05252389035120896701475650602243668854)
    i ==  4 && return (0.05252389035120896701475650602243668854,   0.05252389035120896701475650602243668854)
    i ==  5 && return (0.49251267504133686949689766358962473782,   0.01497464991732626100620467282075052437)
    i ==  6 && return (0.01497464991732626100620467282075052437,   0.49251267504133686949689766358962473782)
    i ==  7 && return (0.49251267504133686949689766358962473782,   0.49251267504133686949689766358962473782)
    i ==  8 && return (0.11144887332302137645270529570471432488,   0.77710225335395724709458940859057135024)
    i ==  9 && return (0.77710225335395724709458940859057135024,   0.11144887332302137645270529570471432488)
    i == 10 && return (0.11144887332302137645270529570471432488,   0.11144887332302137645270529570471432488)
    i == 11 && return (0.45919420103954365747019392895081297796,   0.08161159792091268505961214209837404408)
    i == 12 && return (0.08161159792091268505961214209837404408,   0.45919420103954365747019392895081297796)
    i == 13 && return (0.45919420103954365747019392895081297796,   0.45919420103954365747019392895081297796)
    i == 14 && return (0.40396972255190119660803750853617953458,   0.19206055489619760678392498292764093085)
    i == 15 && return (0.19206055489619760678392498292764093085,   0.40396972255190119660803750853617953458)
    i == 16 && return (0.40396972255190119660803750853617953458,   0.40396972255190119660803750853617953458)
    i == 17 && return (0.17817010478176431084277184100072978600,   0.64365979043647137831445631799854042799)
    i == 18 && return (0.64365979043647137831445631799854042799,   0.17817010478176431084277184100072978600)
    i == 19 && return (0.17817010478176431084277184100072978600,   0.17817010478176431084277184100072978600)
    i == 20 && return (0.01163946118378944692098669994462738176,   0.97672107763242110615802660011074523649)
    i == 21 && return (0.97672107763242110615802660011074523649,   0.01163946118378944692098669994462738176)
    i == 22 && return (0.01163946118378944692098669994462738176,   0.01163946118378944692098669994462738176)
    i == 23 && return (0.25516163291360769750874944902104329860,   0.48967673417278460498250110195791340279)
    i == 24 && return (0.48967673417278460498250110195791340279,   0.25516163291360769750874944902104329860)
    i == 25 && return (0.25516163291360769750874944902104329860,   0.25516163291360769750874944902104329860)
    i == 26 && return (0.13069767626803240456960894234712763239,   0.83015646440027537410571918654998135470)
    i == 27 && return (0.83015646440027537410571918654998135470,   0.13069767626803240456960894234712763239)
    i == 28 && return (0.03914585933169222132467187110289101290,   0.83015646440027537410571918654998135470)
    i == 29 && return (0.83015646440027537410571918654998135470,   0.03914585933169222132467187110289101290)
    i == 30 && return (0.03914585933169222132467187110289101290,   0.13069767626803240456960894234712763239)
    i == 31 && return (0.13069767626803240456960894234712763239,   0.03914585933169222132467187110289101290)
    i == 32 && return (0.31131762980954125277513064978698455388,   0.55936980572030091415885379835651398421)
    i == 33 && return (0.55936980572030091415885379835651398421,   0.31131762980954125277513064978698455388)
    i == 34 && return (0.12931256447015783306601555185650146192,   0.55936980572030091415885379835651398421)
    i == 35 && return (0.55936980572030091415885379835651398421,   0.12931256447015783306601555185650146192)
    i == 36 && return (0.12931256447015783306601555185650146192,   0.31131762980954125277513064978698455388)
    i == 37 && return (0.31131762980954125277513064978698455388,   0.12931256447015783306601555185650146192)
    i == 38 && return (0.00206892589660480761010570185940547896,   0.63331329312878413304686765899100056913)
    i == 39 && return (0.63331329312878413304686765899100056913,   0.00206892589660480761010570185940547896)
    i == 40 && return (0.36461778097461105934302663914959395191,   0.63331329312878413304686765899100056913)
    i == 41 && return (0.63331329312878413304686765899100056913,   0.36461778097461105934302663914959395191)
    i == 42 && return (0.36461778097461105934302663914959395191,   0.00206892589660480761010570185940547896)
    i == 43 && return (0.00206892589660480761010570185940547896,   0.36461778097461105934302663914959395191)
    i == 44 && return (0.07456029460162667853706512541265178407,   0.70400481996604210988087919078165922687)
    i == 45 && return (0.70400481996604210988087919078165922687,   0.07456029460162667853706512541265178407)
    i == 46 && return (0.22143488543233121158205568380568898906,   0.70400481996604210988087919078165922687)
    i == 47 && return (0.70400481996604210988087919078165922687,   0.22143488543233121158205568380568898906)
    i == 48 && return (0.22143488543233121158205568380568898906,   0.07456029460162667853706512541265178407)
    i == 49 && return (0.07456029460162667853706512541265178407,   0.22143488543233121158205568380568898906)
    i == 50 && return (0.00500728825735449113349109438258288932,   0.85256695437688919967825331517400493077)
    i == 51 && return (0.85256695437688919967825331517400493077,   0.00500728825735449113349109438258288932)
    i == 52 && return (0.14242575736575630918825559044341217992,   0.85256695437688919967825331517400493077)
    i == 53 && return (0.85256695437688919967825331517400493077,   0.14242575736575630918825559044341217992)
    i == 54 && return (0.14242575736575630918825559044341217992,   0.00500728825735449113349109438258288932)
    i == 55 && return (0.00500728825735449113349109438258288932,   0.14242575736575630918825559044341217992)
    i == 56 && return (0.04088801119601687613912789552879461629,   0.60508397906870796411284941918893245739)
    i == 57 && return (0.60508397906870796411284941918893245739,   0.04088801119601687613912789552879461629)
    i == 58 && return (0.35402800973527515974802268528227292631,   0.60508397906870796411284941918893245739)
    i == 59 && return (0.60508397906870796411284941918893245739,   0.35402800973527515974802268528227292631)
    i == 60 && return (0.35402800973527515974802268528227292631,   0.04088801119601687613912789552879461629)
    i == 61 && return (0.04088801119601687613912789552879461629,   0.35402800973527515974802268528227292631)
    i == 62 && return (0.24189457896057956857802899719314138233,   0.74318136895743635974657061673149800631)
    i == 63 && return (0.74318136895743635974657061673149800631,   0.24189457896057956857802899719314138233)
    i == 64 && return (0.01492405208198407167540038607536061136,   0.74318136895743635974657061673149800631)
    i == 65 && return (0.74318136895743635974657061673149800631,   0.01492405208198407167540038607536061136)
    i == 66 && return (0.01492405208198407167540038607536061136,   0.24189457896057956857802899719314138233)
    i == 67 && return (0.24189457896057956857802899719314138233,   0.01492405208198407167540038607536061136)
    i == 68 && return (0.06008627532230669799239624595785793087,   0.93013769887680514665628802507801905015)
    i == 69 && return (0.93013769887680514665628802507801905015,   0.06008627532230669799239624595785793087)
    i == 70 && return (0.00977602580088815535131572896412301898,   0.93013769887680514665628802507801905015)
    i == 71 && return (0.93013769887680514665628802507801905015,   0.00977602580088815535131572896412301898)
    i == 72 && return (0.00977602580088815535131572896412301898,   0.06008627532230669799239624595785793087)
    i == 73 && return (0.06008627532230669799239624595785793087,   0.00977602580088815535131572896412301898)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{19} in AbstractTriangle"))
end

# --------------------------- Strength φ = 20 ---------------------------
# Number of points: 79

nquadpoints(::Type{<:AbstractTriangle}, ::GaussQuadrature{20}) = 79

function quadweight(::Type{<:AbstractTriangle}, ::GaussQuadrature{20}, i::Integer)::Float64
    i ==  1 && return 0.01391011070145311590789169706347451288
    i ==  2 && return 0.01408320130752024753216044603118267484
    i ==  3 && return 0.01408320130752024753216044603118267484
    i ==  4 && return 0.01408320130752024753216044603118267484
    i ==  5 && return 0.00079884079106661986197364618326644427
    i ==  6 && return 0.00079884079106661986197364618326644427
    i ==  7 && return 0.00079884079106661986197364618326644427
    i ==  8 && return 0.00783023077607453342110175091222355086
    i ==  9 && return 0.00783023077607453342110175091222355086
    i == 10 && return 0.00783023077607453342110175091222355086
    i == 11 && return 0.00917346297425291447981321352953451088
    i == 12 && return 0.00917346297425291447981321352953451088
    i == 13 && return 0.00917346297425291447981321352953451088
    i == 14 && return 0.00945239993323244768682854066019989918
    i == 15 && return 0.00945239993323244768682854066019989918
    i == 16 && return 0.00945239993323244768682854066019989918
    i == 17 && return 0.00216127541066557752617318053945169363
    i == 18 && return 0.00216127541066557752617318053945169363
    i == 19 && return 0.00216127541066557752617318053945169363
    i == 20 && return 0.01378805062907045901338772271581934827
    i == 21 && return 0.01378805062907045901338772271581934827
    i == 22 && return 0.01378805062907045901338772271581934827
    i == 23 && return 0.00710182530340844049192011648111982260
    i == 24 && return 0.00710182530340844049192011648111982260
    i == 25 && return 0.00710182530340844049192011648111982260
    i == 26 && return 0.00220289741855849756403281770394634616
    i == 27 && return 0.00220289741855849756403281770394634616
    i == 28 && return 0.00220289741855849756403281770394634616
    i == 29 && return 0.00220289741855849756403281770394634616
    i == 30 && return 0.00220289741855849756403281770394634616
    i == 31 && return 0.00220289741855849756403281770394634616
    i == 32 && return 0.00598639857895469002014631403624979137
    i == 33 && return 0.00598639857895469002014631403624979137
    i == 34 && return 0.00598639857895469002014631403624979137
    i == 35 && return 0.00598639857895469002014631403624979137
    i == 36 && return 0.00598639857895469002014631403624979137
    i == 37 && return 0.00598639857895469002014631403624979137
    i == 38 && return 0.00112986960212586552948087876459823901
    i == 39 && return 0.00112986960212586552948087876459823901
    i == 40 && return 0.00112986960212586552948087876459823901
    i == 41 && return 0.00112986960212586552948087876459823901
    i == 42 && return 0.00112986960212586552948087876459823901
    i == 43 && return 0.00112986960212586552948087876459823901
    i == 44 && return 0.00866722556721933306218265651450893356
    i == 45 && return 0.00866722556721933306218265651450893356
    i == 46 && return 0.00866722556721933306218265651450893356
    i == 47 && return 0.00866722556721933306218265651450893356
    i == 48 && return 0.00866722556721933306218265651450893356
    i == 49 && return 0.00866722556721933306218265651450893356
    i == 50 && return 0.00414571152761385771276236265890761915
    i == 51 && return 0.00414571152761385771276236265890761915
    i == 52 && return 0.00414571152761385771276236265890761915
    i == 53 && return 0.00414571152761385771276236265890761915
    i == 54 && return 0.00414571152761385771276236265890761915
    i == 55 && return 0.00414571152761385771276236265890761915
    i == 56 && return 0.00772260782209922984437041266271335430
    i == 57 && return 0.00772260782209922984437041266271335430
    i == 58 && return 0.00772260782209922984437041266271335430
    i == 59 && return 0.00772260782209922984437041266271335430
    i == 60 && return 0.00772260782209922984437041266271335430
    i == 61 && return 0.00772260782209922984437041266271335430
    i == 62 && return 0.00369568150025529797821921861319259542
    i == 63 && return 0.00369568150025529797821921861319259542
    i == 64 && return 0.00369568150025529797821921861319259542
    i == 65 && return 0.00369568150025529797821921861319259542
    i == 66 && return 0.00369568150025529797821921861319259542
    i == 67 && return 0.00369568150025529797821921861319259542
    i == 68 && return 0.01169174573182773693254607773444546245
    i == 69 && return 0.01169174573182773693254607773444546245
    i == 70 && return 0.01169174573182773693254607773444546245
    i == 71 && return 0.01169174573182773693254607773444546245
    i == 72 && return 0.01169174573182773693254607773444546245
    i == 73 && return 0.01169174573182773693254607773444546245
    i == 74 && return 0.00357820023845768536493133660779293417
    i == 75 && return 0.00357820023845768536493133660779293417
    i == 76 && return 0.00357820023845768536493133660779293417
    i == 77 && return 0.00357820023845768536493133660779293417
    i == 78 && return 0.00357820023845768536493133660779293417
    i == 79 && return 0.00357820023845768536493133660779293417
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{20} in AbstractTriangle"))
end

function quadpoint(::Type{<:AbstractTriangle}, ::GaussQuadrature{20}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.33333333333333333333333333333333333334,   0.33333333333333333333333333333333333334)
    i ==  2 && return (0.25457926767333911238485264812738463842,   0.49084146465332177523029470374523072315)
    i ==  3 && return (0.49084146465332177523029470374523072315,   0.25457926767333911238485264812738463842)
    i ==  4 && return (0.25457926767333911238485264812738463842,   0.25457926767333911238485264812738463842)
    i ==  5 && return (0.01097614102839776403964801185887981246,   0.97804771794320447192070397628224037508)
    i ==  6 && return (0.97804771794320447192070397628224037508,   0.01097614102839776403964801185887981246)
    i ==  7 && return (0.01097614102839776403964801185887981246,   0.01097614102839776403964801185887981246)
    i ==  8 && return (0.10938359671171459701687247489983362205,   0.78123280657657080596625505020033275589)
    i ==  9 && return (0.78123280657657080596625505020033275589,   0.10938359671171459701687247489983362205)
    i == 10 && return (0.10938359671171459701687247489983362205,   0.10938359671171459701687247489983362205)
    i == 11 && return (0.18629499774454094277173250805762435447,   0.62741000451091811445653498388475129105)
    i == 12 && return (0.62741000451091811445653498388475129105,   0.18629499774454094277173250805762435447)
    i == 13 && return (0.18629499774454094277173250805762435447,   0.18629499774454094277173250805762435447)
    i == 14 && return (0.44555105695592481518722227843421440766,   0.10889788608815036962555544313157118467)
    i == 15 && return (0.10889788608815036962555544313157118467,   0.44555105695592481518722227843421440766)
    i == 16 && return (0.44555105695592481518722227843421440766,   0.44555105695592481518722227843421440766)
    i == 17 && return (0.03731088059888469399350371628721622194,   0.92537823880223061201299256742556755612)
    i == 18 && return (0.92537823880223061201299256742556755612,   0.03731088059888469399350371628721622194)
    i == 19 && return (0.03731088059888469399350371628721622194,   0.03731088059888469399350371628721622194)
    i == 20 && return (0.39342534781709985867896374350327759148,   0.21314930436580028264207251299344481704)
    i == 21 && return (0.21314930436580028264207251299344481704,   0.39342534781709985867896374350327759148)
    i == 22 && return (0.39342534781709985867896374350327759148,   0.39342534781709985867896374350327759148)
    i == 23 && return (0.47624561154049901321035187223259095597,   0.04750877691900197357929625553481808806)
    i == 24 && return (0.04750877691900197357929625553481808806,   0.47624561154049901321035187223259095597)
    i == 25 && return (0.47624561154049901321035187223259095597,   0.47624561154049901321035187223259095597)
    i == 26 && return (0.00757078050469652826323345852856154599,   0.83329551183823624717215119004308659621)
    i == 27 && return (0.83329551183823624717215119004308659621,   0.00757078050469652826323345852856154599)
    i == 28 && return (0.15913370765706722456461535142835185781,   0.83329551183823624717215119004308659621)
    i == 29 && return (0.83329551183823624717215119004308659621,   0.15913370765706722456461535142835185781)
    i == 30 && return (0.15913370765706722456461535142835185781,   0.00757078050469652826323345852856154599)
    i == 31 && return (0.00757078050469652826323345852856154599,   0.15913370765706722456461535142835185781)
    i == 32 && return (0.04656036490766431651376955460526805647,   0.75492150286354750510620874238688294515)
    i == 33 && return (0.75492150286354750510620874238688294515,   0.04656036490766431651376955460526805647)
    i == 34 && return (0.19851813222878817838002170300784899838,   0.75492150286354750510620874238688294515)
    i == 35 && return (0.75492150286354750510620874238688294515,   0.19851813222878817838002170300784899838)
    i == 36 && return (0.19851813222878817838002170300784899838,   0.04656036490766431651376955460526805647)
    i == 37 && return (0.04656036490766431651376955460526805647,   0.19851813222878817838002170300784899838)
    i == 38 && return (0.06409058560843406004986566761783018771,   0.93105447678394218666176918080325603555)
    i == 39 && return (0.93105447678394218666176918080325603555,   0.06409058560843406004986566761783018771)
    i == 40 && return (0.00485493760762375328836515157891377674,   0.93105447678394218666176918080325603555)
    i == 41 && return (0.93105447678394218666176918080325603555,   0.00485493760762375328836515157891377674)
    i == 42 && return (0.00485493760762375328836515157891377674,   0.06409058560843406004986566761783018771)
    i == 43 && return (0.06409058560843406004986566761783018771,   0.00485493760762375328836515157891377674)
    i == 44 && return (0.05498747914298681063422724851581477104,   0.61187770354742569993814765382164271516)
    i == 45 && return (0.61187770354742569993814765382164271516,   0.05498747914298681063422724851581477104)
    i == 46 && return (0.33313481730958748942762509766254251380,   0.61187770354742569993814765382164271516)
    i == 47 && return (0.61187770354742569993814765382164271516,   0.33313481730958748942762509766254251380)
    i == 48 && return (0.33313481730958748942762509766254251380,   0.05498747914298681063422724851581477104)
    i == 49 && return (0.05498747914298681063422724851581477104,   0.33313481730958748942762509766254251380)
    i == 50 && return (0.09995229628813865538290782334711619810,   0.86168401893648674924448082420573230056)
    i == 51 && return (0.86168401893648674924448082420573230056,   0.09995229628813865538290782334711619810)
    i == 52 && return (0.03836368477537459537261135244715150135,   0.86168401893648674924448082420573230056)
    i == 53 && return (0.86168401893648674924448082420573230056,   0.03836368477537459537261135244715150135)
    i == 54 && return (0.03836368477537459537261135244715150135,   0.09995229628813865538290782334711619810)
    i == 55 && return (0.09995229628813865538290782334711619810,   0.03836368477537459537261135244715150135)
    i == 56 && return (0.10622720472027004236255430205389244806,   0.67816573788963555460799772999561596562)
    i == 57 && return (0.67816573788963555460799772999561596562,   0.10622720472027004236255430205389244806)
    i == 58 && return (0.21560705739009440302944796795049158632,   0.67816573788963555460799772999561596562)
    i == 59 && return (0.67816573788963555460799772999561596562,   0.21560705739009440302944796795049158632)
    i == 60 && return (0.21560705739009440302944796795049158632,   0.10622720472027004236255430205389244806)
    i == 61 && return (0.10622720472027004236255430205389244806,   0.21560705739009440302944796795049158632)
    i == 62 && return (0.42002375881622407964644291694726894360,   0.57014469289097335977504584732404431430)
    i == 63 && return (0.57014469289097335977504584732404431430,   0.42002375881622407964644291694726894360)
    i == 64 && return (0.00983154829280256057851123572868674210,   0.57014469289097335977504584732404431430)
    i == 65 && return (0.57014469289097335977504584732404431430,   0.00983154829280256057851123572868674210)
    i == 66 && return (0.00983154829280256057851123572868674210,   0.42002375881622407964644291694726894360)
    i == 67 && return (0.42002375881622407964644291694726894360,   0.00983154829280256057851123572868674210)
    i == 68 && return (0.31786012383577201597596767163025964822,   0.54233180417242808542988084440132316832)
    i == 69 && return (0.54233180417242808542988084440132316832,   0.31786012383577201597596767163025964822)
    i == 70 && return (0.13980807199179989859415148396841718346,   0.54233180417242808542988084440132316832)
    i == 71 && return (0.54233180417242808542988084440132316832,   0.13980807199179989859415148396841718346)
    i == 72 && return (0.13980807199179989859415148396841718346,   0.31786012383577201597596767163025964822)
    i == 73 && return (0.31786012383577201597596767163025964822,   0.13980807199179989859415148396841718346)
    i == 74 && return (0.01073721285601108733052456100789577709,   0.70868137572032367783198890844804101614)
    i == 75 && return (0.70868137572032367783198890844804101614,   0.01073721285601108733052456100789577709)
    i == 76 && return (0.28058141142366523483748653054406320676,   0.70868137572032367783198890844804101614)
    i == 77 && return (0.70868137572032367783198890844804101614,   0.28058141142366523483748653054406320676)
    i == 78 && return (0.28058141142366523483748653054406320676,   0.01073721285601108733052456100789577709)
    i == 79 && return (0.01073721285601108733052456100789577709,   0.28058141142366523483748653054406320676)
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{20} in AbstractTriangle"))
end

##############################
# Quadrilateral
##############################
#=
    (-0.5, 0.5)      (0.5, 0.5)
          ○─────────────○
          │             │
          │             │
          │             │
          ○─────────────○
    (-0.5, -0.5)     (0.5, -0.5)

Area = 1

Changed parametrization from (-1, 1) to (-0.5, 0.5) to be consistent with other elements.
=#

# --------------------------- Strength φ = 1 ---------------------------
# Number of points: 1

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{1}) = 1

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{1}, i::Integer)::Float64
    i ==  1 && return 4.00000000000000000000000000000000000000 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{1} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{1}, i::Integer)::SVector{2, Float64}
    i ==  1 && return (0.00000000000000000000000000000000000000,   0.00000000000000000000000000000000000000) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{1} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 2 ---------------------------
# Number of points: 4

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{2}) = 4

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{2}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(3), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{2}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(3), i)
end

# --------------------------- Strength φ = 3 ---------------------------
# Number of points: 4

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{3}) = 4

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{3}, i::Integer)::Float64
    i ==  1 && return 1.00000000000000000000000000000000000000 * 0.25
    i ==  2 && return 1.00000000000000000000000000000000000000 * 0.25
    i ==  3 && return 1.00000000000000000000000000000000000000 * 0.25
    i ==  4 && return 1.00000000000000000000000000000000000000 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{3} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{3}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.57735026918962576450914878050195745565,   0.57735026918962576450914878050195745565) .* 0.5
    i ==  2 && return ( 0.57735026918962576450914878050195745565,  -0.57735026918962576450914878050195745565) .* 0.5
    i ==  3 && return (-0.57735026918962576450914878050195745565,   0.57735026918962576450914878050195745565) .* 0.5
    i ==  4 && return (-0.57735026918962576450914878050195745565,  -0.57735026918962576450914878050195745565) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{3} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 4 ---------------------------
# Number of points: 8

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{4}) = 8

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{4}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(5), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{4}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(5), i)
end

# --------------------------- Strength φ = 5 ---------------------------
# Number of points: 8

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{5}) = 8

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{5}, i::Integer)::Float64
    i ==  1 && return 0.81632653061224489795918367346938775510 * 0.25
    i ==  2 && return 0.81632653061224489795918367346938775510 * 0.25
    i ==  3 && return 0.81632653061224489795918367346938775510 * 0.25
    i ==  4 && return 0.81632653061224489795918367346938775510 * 0.25
    i ==  5 && return 0.18367346938775510204081632653061224490 * 0.25
    i ==  6 && return 0.18367346938775510204081632653061224490 * 0.25
    i ==  7 && return 0.18367346938775510204081632653061224490 * 0.25
    i ==  8 && return 0.18367346938775510204081632653061224490 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{5} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{5}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.68313005106397322554806924536807013272,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.68313005106397322554806924536807013272) .* 0.5
    i ==  3 && return (-0.68313005106397322554806924536807013272,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.68313005106397322554806924536807013272) .* 0.5
    i ==  5 && return ( 0.88191710368819686350053858454642014190,   0.88191710368819686350053858454642014190) .* 0.5
    i ==  6 && return ( 0.88191710368819686350053858454642014190,  -0.88191710368819686350053858454642014190) .* 0.5
    i ==  7 && return (-0.88191710368819686350053858454642014190,   0.88191710368819686350053858454642014190) .* 0.5
    i ==  8 && return (-0.88191710368819686350053858454642014190,  -0.88191710368819686350053858454642014190) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{5} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 6 ---------------------------
# Number of points: 12

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{6}) = 12

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{6}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(7), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{6}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(7), i)
end

# --------------------------- Strength φ = 7 ---------------------------
# Number of points: 12

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{7}) = 12

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{7}, i::Integer)::Float64
    i ==  1 && return 0.24197530864197530864197530864197530864 * 0.25
    i ==  2 && return 0.24197530864197530864197530864197530864 * 0.25
    i ==  3 && return 0.24197530864197530864197530864197530864 * 0.25
    i ==  4 && return 0.24197530864197530864197530864197530864 * 0.25
    i ==  5 && return 0.23743177469063023421810525931129352533 * 0.25
    i ==  6 && return 0.23743177469063023421810525931129352533 * 0.25
    i ==  7 && return 0.23743177469063023421810525931129352533 * 0.25
    i ==  8 && return 0.23743177469063023421810525931129352533 * 0.25
    i ==  9 && return 0.52059291666739445713991943204673116603 * 0.25
    i == 10 && return 0.52059291666739445713991943204673116603 * 0.25
    i == 11 && return 0.52059291666739445713991943204673116603 * 0.25
    i == 12 && return 0.52059291666739445713991943204673116603 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{7} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{7}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.92582009977255146156656677658399952253,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.92582009977255146156656677658399952253) .* 0.5
    i ==  3 && return (-0.92582009977255146156656677658399952253,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.92582009977255146156656677658399952253) .* 0.5
    i ==  5 && return ( 0.80597978291859874370785618135074424630,   0.80597978291859874370785618135074424630) .* 0.5
    i ==  6 && return ( 0.80597978291859874370785618135074424630,  -0.80597978291859874370785618135074424630) .* 0.5
    i ==  7 && return (-0.80597978291859874370785618135074424630,   0.80597978291859874370785618135074424630) .* 0.5
    i ==  8 && return (-0.80597978291859874370785618135074424630,  -0.80597978291859874370785618135074424630) .* 0.5
    i ==  9 && return ( 0.38055443320831565637910635908639413550,   0.38055443320831565637910635908639413550) .* 0.5
    i == 10 && return ( 0.38055443320831565637910635908639413550,  -0.38055443320831565637910635908639413550) .* 0.5
    i == 11 && return (-0.38055443320831565637910635908639413550,   0.38055443320831565637910635908639413550) .* 0.5
    i == 12 && return (-0.38055443320831565637910635908639413550,  -0.38055443320831565637910635908639413550) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{7} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 8 ---------------------------
# Number of points: 20

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{8}) = 20

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{8}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(9), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{8}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(9), i)
end

# --------------------------- Strength φ = 9 ---------------------------
# Number of points: 20

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{9}) = 20

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{9}, i::Integer)::Float64
    i ==  1 && return 0.45416396068674902744178724560528503088 * 0.25
    i ==  2 && return 0.45416396068674902744178724560528503088 * 0.25
    i ==  3 && return 0.45416396068674902744178724560528503088 * 0.25
    i ==  4 && return 0.45416396068674902744178724560528503088 * 0.25
    i ==  5 && return 0.04273123186577576258013072153984165176 * 0.25
    i ==  6 && return 0.04273123186577576258013072153984165176 * 0.25
    i ==  7 && return 0.04273123186577576258013072153984165176 * 0.25
    i ==  8 && return 0.04273123186577576258013072153984165176 * 0.25
    i ==  9 && return 0.21420036092686163194242563430597811641 * 0.25
    i == 10 && return 0.21420036092686163194242563430597811641 * 0.25
    i == 11 && return 0.21420036092686163194242563430597811641 * 0.25
    i == 12 && return 0.21420036092686163194242563430597811641 * 0.25
    i == 13 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 14 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 15 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 16 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 17 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 18 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 19 && return 0.14445222326030678901782819927444760048 * 0.25
    i == 20 && return 0.14445222326030678901782819927444760048 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{9} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{9}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.48892685697436906957409306022929339497,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.48892685697436906957409306022929339497) .* 0.5
    i ==  3 && return (-0.48892685697436906957409306022929339497,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.48892685697436906957409306022929339497) .* 0.5
    i ==  5 && return ( 0.93965525809683770585757175046316803289,   0.93965525809683770585757175046316803289) .* 0.5
    i ==  6 && return ( 0.93965525809683770585757175046316803289,  -0.93965525809683770585757175046316803289) .* 0.5
    i ==  7 && return (-0.93965525809683770585757175046316803289,   0.93965525809683770585757175046316803289) .* 0.5
    i ==  8 && return (-0.93965525809683770585757175046316803289,  -0.93965525809683770585757175046316803289) .* 0.5
    i ==  9 && return ( 0.69088055048634387281488830813840885584,   0.69088055048634387281488830813840885584) .* 0.5
    i == 10 && return ( 0.69088055048634387281488830813840885584,  -0.69088055048634387281488830813840885584) .* 0.5
    i == 11 && return (-0.69088055048634387281488830813840885584,   0.69088055048634387281488830813840885584) .* 0.5
    i == 12 && return (-0.69088055048634387281488830813840885584,  -0.69088055048634387281488830813840885584) .* 0.5
    i == 13 && return ( 0.91862044105672225965547017914277941630,   0.34487202536440357617123041812469730370) .* 0.5
    i == 14 && return ( 0.34487202536440357617123041812469730370,   0.91862044105672225965547017914277941630) .* 0.5
    i == 15 && return ( 0.91862044105672225965547017914277941630,  -0.34487202536440357617123041812469730370) .* 0.5
    i == 16 && return (-0.34487202536440357617123041812469730370,   0.91862044105672225965547017914277941630) .* 0.5
    i == 17 && return (-0.91862044105672225965547017914277941630,   0.34487202536440357617123041812469730370) .* 0.5
    i == 18 && return ( 0.34487202536440357617123041812469730370,  -0.91862044105672225965547017914277941630) .* 0.5
    i == 19 && return (-0.91862044105672225965547017914277941630,  -0.34487202536440357617123041812469730370) .* 0.5
    i == 20 && return (-0.34487202536440357617123041812469730370,  -0.91862044105672225965547017914277941630) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{9} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 10 ---------------------------
# Number of points: 28

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{10}) = 28

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{10}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(11), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{10}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(11), i)
end

# --------------------------- Strength φ = 11 ---------------------------
# Number of points: 28

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{11}) = 28

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{11}, i::Integer)::Float64
    i ==  1 && return 0.21740043986871200551566672515052291339 * 0.25
    i ==  2 && return 0.21740043986871200551566672515052291339 * 0.25
    i ==  3 && return 0.21740043986871200551566672515052291339 * 0.25
    i ==  4 && return 0.21740043986871200551566672515052291339 * 0.25
    i ==  5 && return 0.27727410298385108795028691796804462632 * 0.25
    i ==  6 && return 0.27727410298385108795028691796804462632 * 0.25
    i ==  7 && return 0.27727410298385108795028691796804462632 * 0.25
    i ==  8 && return 0.27727410298385108795028691796804462632 * 0.25
    i ==  9 && return 0.21393363787824810450280500660206134837 * 0.25
    i == 10 && return 0.21393363787824810450280500660206134837 * 0.25
    i == 11 && return 0.21393363787824810450280500660206134837 * 0.25
    i == 12 && return 0.21393363787824810450280500660206134837 * 0.25
    i == 13 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 14 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 15 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 16 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 17 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 18 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 19 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 20 && return 0.04407456911498309205430427115411206178 * 0.25
    i == 21 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 22 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 23 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 24 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 25 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 26 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 27 && return 0.10162134051961130896131640398557349419 * 0.25
    i == 28 && return 0.10162134051961130896131640398557349419 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{11} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{11}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.71461782966460591762942382404176367266,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.71461782966460591762942382404176367266) .* 0.5
    i ==  3 && return (-0.71461782966460591762942382404176367266,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.71461782966460591762942382404176367266) .* 0.5
    i ==  5 && return ( 0.27365721017145961383557026431906649027,   0.27365721017145961383557026431906649027) .* 0.5
    i ==  6 && return ( 0.27365721017145961383557026431906649027,  -0.27365721017145961383557026431906649027) .* 0.5
    i ==  7 && return (-0.27365721017145961383557026431906649027,   0.27365721017145961383557026431906649027) .* 0.5
    i ==  8 && return (-0.27365721017145961383557026431906649027,  -0.27365721017145961383557026431906649027) .* 0.5
    i ==  9 && return ( 0.63660393221230104405852833198974404207,   0.63660393221230104405852833198974404207) .* 0.5
    i == 10 && return ( 0.63660393221230104405852833198974404207,  -0.63660393221230104405852833198974404207) .* 0.5
    i == 11 && return (-0.63660393221230104405852833198974404207,   0.63660393221230104405852833198974404207) .* 0.5
    i == 12 && return (-0.63660393221230104405852833198974404207,  -0.63660393221230104405852833198974404207) .* 0.5
    i == 13 && return ( 0.95163038878403345881049829363696371918,   0.81556543368963841306389865463928759233) .* 0.5
    i == 14 && return ( 0.81556543368963841306389865463928759233,   0.95163038878403345881049829363696371918) .* 0.5
    i == 15 && return ( 0.95163038878403345881049829363696371918,  -0.81556543368963841306389865463928759233) .* 0.5
    i == 16 && return (-0.81556543368963841306389865463928759233,   0.95163038878403345881049829363696371918) .* 0.5
    i == 17 && return (-0.95163038878403345881049829363696371918,   0.81556543368963841306389865463928759233) .* 0.5
    i == 18 && return ( 0.81556543368963841306389865463928759233,  -0.95163038878403345881049829363696371918) .* 0.5
    i == 19 && return (-0.95163038878403345881049829363696371918,  -0.81556543368963841306389865463928759233) .* 0.5
    i == 20 && return (-0.81556543368963841306389865463928759233,  -0.95163038878403345881049829363696371918) .* 0.5
    i == 21 && return ( 0.34620720004764544118747320724330043979,   0.93556787148759108135480212161830515337) .* 0.5
    i == 22 && return ( 0.93556787148759108135480212161830515337,   0.34620720004764544118747320724330043979) .* 0.5
    i == 23 && return ( 0.34620720004764544118747320724330043979,  -0.93556787148759108135480212161830515337) .* 0.5
    i == 24 && return (-0.93556787148759108135480212161830515337,   0.34620720004764544118747320724330043979) .* 0.5
    i == 25 && return (-0.34620720004764544118747320724330043979,   0.93556787148759108135480212161830515337) .* 0.5
    i == 26 && return ( 0.93556787148759108135480212161830515337,  -0.34620720004764544118747320724330043979) .* 0.5
    i == 27 && return (-0.34620720004764544118747320724330043979,  -0.93556787148759108135480212161830515337) .* 0.5
    i == 28 && return (-0.93556787148759108135480212161830515337,  -0.34620720004764544118747320724330043979) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{11} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 12 ---------------------------
# Number of points: 37

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{12}) = 37

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{12}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(13), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{12}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(13), i)
end

# --------------------------- Strength φ = 13 ---------------------------
# Number of points: 37

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{13}) = 37

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{13}, i::Integer)::Float64
    i ==  1 && return 0.29999334435890964324064310267149902525 * 0.25
    i ==  2 && return 0.03812862534985273761935156540568446224 * 0.25
    i ==  3 && return 0.03812862534985273761935156540568446224 * 0.25
    i ==  4 && return 0.03812862534985273761935156540568446224 * 0.25
    i ==  5 && return 0.03812862534985273761935156540568446224 * 0.25
    i ==  6 && return 0.18453546896980721238582475319389847126 * 0.25
    i ==  7 && return 0.18453546896980721238582475319389847126 * 0.25
    i ==  8 && return 0.18453546896980721238582475319389847126 * 0.25
    i ==  9 && return 0.18453546896980721238582475319389847126 * 0.25
    i == 10 && return 0.03950714064745243368926740734172959923 * 0.25
    i == 11 && return 0.03950714064745243368926740734172959923 * 0.25
    i == 12 && return 0.03950714064745243368926740734172959923 * 0.25
    i == 13 && return 0.03950714064745243368926740734172959923 * 0.25
    i == 14 && return 0.23139851940068538741918311064046319298 * 0.25
    i == 15 && return 0.23139851940068538741918311064046319298 * 0.25
    i == 16 && return 0.23139851940068538741918311064046319298 * 0.25
    i == 17 && return 0.23139851940068538741918311064046319298 * 0.25
    i == 18 && return 0.13724209671300348677866127359579016247 * 0.25
    i == 19 && return 0.13724209671300348677866127359579016247 * 0.25
    i == 20 && return 0.13724209671300348677866127359579016247 * 0.25
    i == 21 && return 0.13724209671300348677866127359579016247 * 0.25
    i == 22 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 23 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 24 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 25 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 26 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 27 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 28 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 29 && return 0.03351978005038143027938829786808012642 * 0.25
    i == 30 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 31 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 32 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 33 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 34 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 35 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 36 && return 0.11357512636435423536938725920919955133 * 0.25
    i == 37 && return 0.11357512636435423536938725920919955133 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{13} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{13}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.00000000000000000000000000000000000000,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.98346133261324557127407851401210794962,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  3 && return ( 0.00000000000000000000000000000000000000,   0.98346133261324557127407851401210794962) .* 0.5
    i ==  4 && return (-0.98346133261324557127407851401210794962,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  5 && return ( 0.00000000000000000000000000000000000000,  -0.98346133261324557127407851401210794962) .* 0.5
    i ==  6 && return ( 0.63986141836710976174616715579576307077,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  7 && return ( 0.00000000000000000000000000000000000000,   0.63986141836710976174616715579576307077) .* 0.5
    i ==  8 && return (-0.63986141836710976174616715579576307077,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  9 && return ( 0.00000000000000000000000000000000000000,  -0.63986141836710976174616715579576307077) .* 0.5
    i == 10 && return ( 0.91877848807971140189839438297320428483,   0.91877848807971140189839438297320428483) .* 0.5
    i == 11 && return ( 0.91877848807971140189839438297320428483,  -0.91877848807971140189839438297320428483) .* 0.5
    i == 12 && return (-0.91877848807971140189839438297320428483,   0.91877848807971140189839438297320428483) .* 0.5
    i == 13 && return (-0.91877848807971140189839438297320428483,  -0.91877848807971140189839438297320428483) .* 0.5
    i == 14 && return ( 0.37962850518674385579275417103548349005,   0.37962850518674385579275417103548349005) .* 0.5
    i == 15 && return ( 0.37962850518674385579275417103548349005,  -0.37962850518674385579275417103548349005) .* 0.5
    i == 16 && return (-0.37962850518674385579275417103548349005,   0.37962850518674385579275417103548349005) .* 0.5
    i == 17 && return (-0.37962850518674385579275417103548349005,  -0.37962850518674385579275417103548349005) .* 0.5
    i == 18 && return ( 0.69955421651335111029920603284399340644,   0.69955421651335111029920603284399340644) .* 0.5
    i == 19 && return ( 0.69955421651335111029920603284399340644,  -0.69955421651335111029920603284399340644) .* 0.5
    i == 20 && return (-0.69955421651335111029920603284399340644,   0.69955421651335111029920603284399340644) .* 0.5
    i == 21 && return (-0.69955421651335111029920603284399340644,  -0.69955421651335111029920603284399340644) .* 0.5
    i == 22 && return ( 0.64359737499661812031249815775600267943,   0.97506888390598351993655206803811094573) .* 0.5
    i == 23 && return ( 0.97506888390598351993655206803811094573,   0.64359737499661812031249815775600267943) .* 0.5
    i == 24 && return ( 0.64359737499661812031249815775600267943,  -0.97506888390598351993655206803811094573) .* 0.5
    i == 25 && return (-0.97506888390598351993655206803811094573,   0.64359737499661812031249815775600267943) .* 0.5
    i == 26 && return (-0.64359737499661812031249815775600267943,   0.97506888390598351993655206803811094573) .* 0.5
    i == 27 && return ( 0.97506888390598351993655206803811094573,  -0.64359737499661812031249815775600267943) .* 0.5
    i == 28 && return (-0.64359737499661812031249815775600267943,  -0.97506888390598351993655206803811094573) .* 0.5
    i == 29 && return (-0.97506888390598351993655206803811094573,  -0.64359737499661812031249815775600267943) .* 0.5
    i == 30 && return ( 0.33353988116478310285167199804895857823,   0.86442760926706191157507267741750728791) .* 0.5
    i == 31 && return ( 0.86442760926706191157507267741750728791,   0.33353988116478310285167199804895857823) .* 0.5
    i == 32 && return ( 0.33353988116478310285167199804895857823,  -0.86442760926706191157507267741750728791) .* 0.5
    i == 33 && return (-0.86442760926706191157507267741750728791,   0.33353988116478310285167199804895857823) .* 0.5
    i == 34 && return (-0.33353988116478310285167199804895857823,   0.86442760926706191157507267741750728791) .* 0.5
    i == 35 && return ( 0.86442760926706191157507267741750728791,  -0.33353988116478310285167199804895857823) .* 0.5
    i == 36 && return (-0.33353988116478310285167199804895857823,  -0.86442760926706191157507267741750728791) .* 0.5
    i == 37 && return (-0.86442760926706191157507267741750728791,  -0.33353988116478310285167199804895857823) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{13} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 14 ---------------------------
# Number of points: 48

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{14}) = 48

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{14}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(15), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{14}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(15), i)
end

# --------------------------- Strength φ = 15 ---------------------------
# Number of points: 48

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{15}) = 48

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{15}, i::Integer)::Float64
    i ==  1 && return 0.11493292726352536781596028932541766228 * 0.25
    i ==  2 && return 0.11493292726352536781596028932541766228 * 0.25
    i ==  3 && return 0.11493292726352536781596028932541766228 * 0.25
    i ==  4 && return 0.11493292726352536781596028932541766228 * 0.25
    i ==  5 && return 0.18168575896727184957040458577073367484 * 0.25
    i ==  6 && return 0.18168575896727184957040458577073367484 * 0.25
    i ==  7 && return 0.18168575896727184957040458577073367484 * 0.25
    i ==  8 && return 0.18168575896727184957040458577073367484 * 0.25
    i ==  9 && return 0.04123848378876581183902763961721659985 * 0.25
    i == 10 && return 0.04123848378876581183902763961721659985 * 0.25
    i == 11 && return 0.04123848378876581183902763961721659985 * 0.25
    i == 12 && return 0.04123848378876581183902763961721659985 * 0.25
    i == 13 && return 0.00593374648583922131476141978934986810 * 0.25
    i == 14 && return 0.00593374648583922131476141978934986810 * 0.25
    i == 15 && return 0.00593374648583922131476141978934986810 * 0.25
    i == 16 && return 0.00593374648583922131476141978934986810 * 0.25
    i == 17 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 18 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 19 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 20 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 21 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 22 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 23 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 24 && return 0.10114914347743242280761079470300175928 * 0.25
    i == 25 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 26 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 27 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 28 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 29 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 30 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 31 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 32 && return 0.14783672163288121847905618360636339726 * 0.25
    i == 33 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 34 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 35 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 36 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 37 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 38 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 39 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 40 && return 0.02327319414467321460257489193346305992 * 0.25
    i == 41 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 42 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 43 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 44 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 45 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 46 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 47 && return 0.05584548249231201884068116250581288100 * 0.25
    i == 48 && return 0.05584548249231201884068116250581288100 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{15} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{15}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.79809898789700709024555173503596148462,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.79809898789700709024555173503596148462) .* 0.5
    i ==  3 && return (-0.79809898789700709024555173503596148462,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.79809898789700709024555173503596148462) .* 0.5
    i ==  5 && return ( 0.30385302639845975610268178690962703058,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  6 && return ( 0.00000000000000000000000000000000000000,   0.30385302639845975610268178690962703058) .* 0.5
    i ==  7 && return (-0.30385302639845975610268178690962703058,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  8 && return ( 0.00000000000000000000000000000000000000,  -0.30385302639845975610268178690962703058) .* 0.5
    i ==  9 && return ( 0.88242227010688535992041188667767184542,   0.88242227010688535992041188667767184542) .* 0.5
    i == 10 && return ( 0.88242227010688535992041188667767184542,  -0.88242227010688535992041188667767184542) .* 0.5
    i == 11 && return (-0.88242227010688535992041188667767184542,   0.88242227010688535992041188667767184542) .* 0.5
    i == 12 && return (-0.88242227010688535992041188667767184542,  -0.88242227010688535992041188667767184542) .* 0.5
    i == 13 && return ( 0.97778979953990269742424689352375866785,   0.97778979953990269742424689352375866785) .* 0.5
    i == 14 && return ( 0.97778979953990269742424689352375866785,  -0.97778979953990269742424689352375866785) .* 0.5
    i == 15 && return (-0.97778979953990269742424689352375866785,   0.97778979953990269742424689352375866785) .* 0.5
    i == 16 && return (-0.97778979953990269742424689352375866785,  -0.97778979953990269742424689352375866785) .* 0.5
    i == 17 && return ( 0.80871213581950356724002823901416977471,   0.56721357339659070317865169083903012406) .* 0.5
    i == 18 && return ( 0.56721357339659070317865169083903012406,   0.80871213581950356724002823901416977471) .* 0.5
    i == 19 && return ( 0.80871213581950356724002823901416977471,  -0.56721357339659070317865169083903012406) .* 0.5
    i == 20 && return (-0.56721357339659070317865169083903012406,   0.80871213581950356724002823901416977471) .* 0.5
    i == 21 && return (-0.80871213581950356724002823901416977471,   0.56721357339659070317865169083903012406) .* 0.5
    i == 22 && return ( 0.56721357339659070317865169083903012406,  -0.80871213581950356724002823901416977471) .* 0.5
    i == 23 && return (-0.80871213581950356724002823901416977471,  -0.56721357339659070317865169083903012406) .* 0.5
    i == 24 && return (-0.56721357339659070317865169083903012406,  -0.80871213581950356724002823901416977471) .* 0.5
    i == 25 && return ( 0.30465479903705254117098598695333881061,   0.57873619403580651026013939264701051891) .* 0.5
    i == 26 && return ( 0.57873619403580651026013939264701051891,   0.30465479903705254117098598695333881061) .* 0.5
    i == 27 && return ( 0.30465479903705254117098598695333881061,  -0.57873619403580651026013939264701051891) .* 0.5
    i == 28 && return (-0.57873619403580651026013939264701051891,   0.30465479903705254117098598695333881061) .* 0.5
    i == 29 && return (-0.30465479903705254117098598695333881061,   0.57873619403580651026013939264701051891) .* 0.5
    i == 30 && return ( 0.57873619403580651026013939264701051891,  -0.30465479903705254117098598695333881061) .* 0.5
    i == 31 && return (-0.30465479903705254117098598695333881061,  -0.57873619403580651026013939264701051891) .* 0.5
    i == 32 && return (-0.57873619403580651026013939264701051891,  -0.30465479903705254117098598695333881061) .* 0.5
    i == 33 && return ( 0.98050484372453196154002698773025555850,   0.69746363199096701879389045518223605960) .* 0.5
    i == 34 && return ( 0.69746363199096701879389045518223605960,   0.98050484372453196154002698773025555850) .* 0.5
    i == 35 && return ( 0.98050484372453196154002698773025555850,  -0.69746363199096701879389045518223605960) .* 0.5
    i == 36 && return (-0.69746363199096701879389045518223605960,   0.98050484372453196154002698773025555850) .* 0.5
    i == 37 && return (-0.98050484372453196154002698773025555850,   0.69746363199096701879389045518223605960) .* 0.5
    i == 38 && return ( 0.69746363199096701879389045518223605960,  -0.98050484372453196154002698773025555850) .* 0.5
    i == 39 && return (-0.98050484372453196154002698773025555850,  -0.69746363199096701879389045518223605960) .* 0.5
    i == 40 && return (-0.69746363199096701879389045518223605960,  -0.98050484372453196154002698773025555850) .* 0.5
    i == 41 && return ( 0.26484415587231617710014274826830856062,   0.95574251980951170852387507604700262081) .* 0.5
    i == 42 && return ( 0.95574251980951170852387507604700262081,   0.26484415587231617710014274826830856062) .* 0.5
    i == 43 && return ( 0.26484415587231617710014274826830856062,  -0.95574251980951170852387507604700262081) .* 0.5
    i == 44 && return (-0.95574251980951170852387507604700262081,   0.26484415587231617710014274826830856062) .* 0.5
    i == 45 && return (-0.26484415587231617710014274826830856062,   0.95574251980951170852387507604700262081) .* 0.5
    i == 46 && return ( 0.95574251980951170852387507604700262081,  -0.26484415587231617710014274826830856062) .* 0.5
    i == 47 && return (-0.26484415587231617710014274826830856062,  -0.95574251980951170852387507604700262081) .* 0.5
    i == 48 && return (-0.95574251980951170852387507604700262081,  -0.26484415587231617710014274826830856062) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{15} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 16 ---------------------------
# Number of points: 60

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{16}) = 60

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{16}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(17), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{16}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(17), i)
end

# --------------------------- Strength φ = 17 ---------------------------
# Number of points: 60

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{17}) = 60

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{17}, i::Integer)::Float64
    i ==  1 && return 0.13880437768721992480048871346267772478 * 0.25
    i ==  2 && return 0.13880437768721992480048871346267772478 * 0.25
    i ==  3 && return 0.13880437768721992480048871346267772478 * 0.25
    i ==  4 && return 0.13880437768721992480048871346267772478 * 0.25
    i ==  5 && return 0.06534782380746491285906668897353317305 * 0.25
    i ==  6 && return 0.06534782380746491285906668897353317305 * 0.25
    i ==  7 && return 0.06534782380746491285906668897353317305 * 0.25
    i ==  8 && return 0.06534782380746491285906668897353317305 * 0.25
    i ==  9 && return 0.14285641962219959571166270516073482911 * 0.25
    i == 10 && return 0.14285641962219959571166270516073482911 * 0.25
    i == 11 && return 0.14285641962219959571166270516073482911 * 0.25
    i == 12 && return 0.14285641962219959571166270516073482911 * 0.25
    i == 13 && return 0.03671590848525151246610882325296375087 * 0.25
    i == 14 && return 0.03671590848525151246610882325296375087 * 0.25
    i == 15 && return 0.03671590848525151246610882325296375087 * 0.25
    i == 16 && return 0.03671590848525151246610882325296375087 * 0.25
    i == 17 && return 0.08625569963814380454093514127118758759 * 0.25
    i == 18 && return 0.08625569963814380454093514127118758759 * 0.25
    i == 19 && return 0.08625569963814380454093514127118758759 * 0.25
    i == 20 && return 0.08625569963814380454093514127118758759 * 0.25
    i == 21 && return 0.13455627321191692494394965878086112148 * 0.25
    i == 22 && return 0.13455627321191692494394965878086112148 * 0.25
    i == 23 && return 0.13455627321191692494394965878086112148 * 0.25
    i == 24 && return 0.13455627321191692494394965878086112148 * 0.25
    i == 25 && return 0.00765563341490993684944395966679768766 * 0.25
    i == 26 && return 0.00765563341490993684944395966679768766 * 0.25
    i == 27 && return 0.00765563341490993684944395966679768766 * 0.25
    i == 28 && return 0.00765563341490993684944395966679768766 * 0.25
    i == 29 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 30 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 31 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 32 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 33 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 34 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 35 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 36 && return 0.10317672478493534779017919278157584697 * 0.25
    i == 37 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 38 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 39 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 40 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 41 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 42 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 43 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 44 && return 0.05482640023729144091667599575983460490 * 0.25
    i == 45 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 46 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 47 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 48 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 49 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 50 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 51 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 52 && return 0.01511981038825686189863571538364534663 * 0.25
    i == 53 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 54 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 55 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 56 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 57 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 58 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 59 && return 0.02078099665596304330868125079056626423 * 0.25
    i == 60 && return 0.02078099665596304330868125079056626423 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{17} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{17}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.54504298720914838787010174782667747048,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.54504298720914838787010174782667747048) .* 0.5
    i ==  3 && return (-0.54504298720914838787010174782667747048,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.54504298720914838787010174782667747048) .* 0.5
    i ==  5 && return ( 0.91749718821915320817120277758673277115,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  6 && return ( 0.00000000000000000000000000000000000000,   0.91749718821915320817120277758673277115) .* 0.5
    i ==  7 && return (-0.91749718821915320817120277758673277115,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  8 && return ( 0.00000000000000000000000000000000000000,  -0.91749718821915320817120277758673277115) .* 0.5
    i ==  9 && return ( 0.19255424261404688054827243228978233862,   0.19255424261404688054827243228978233862) .* 0.5
    i == 10 && return ( 0.19255424261404688054827243228978233862,  -0.19255424261404688054827243228978233862) .* 0.5
    i == 11 && return (-0.19255424261404688054827243228978233862,   0.19255424261404688054827243228978233862) .* 0.5
    i == 12 && return (-0.19255424261404688054827243228978233862,  -0.19255424261404688054827243228978233862) .* 0.5
    i == 13 && return ( 0.87132868469544327271341598059215273696,   0.87132868469544327271341598059215273696) .* 0.5
    i == 14 && return ( 0.87132868469544327271341598059215273696,  -0.87132868469544327271341598059215273696) .* 0.5
    i == 15 && return (-0.87132868469544327271341598059215273696,   0.87132868469544327271341598059215273696) .* 0.5
    i == 16 && return (-0.87132868469544327271341598059215273696,  -0.87132868469544327271341598059215273696) .* 0.5
    i == 17 && return ( 0.69438809008955075165646918724845941430,   0.69438809008955075165646918724845941430) .* 0.5
    i == 18 && return ( 0.69438809008955075165646918724845941430,  -0.69438809008955075165646918724845941430) .* 0.5
    i == 19 && return (-0.69438809008955075165646918724845941430,   0.69438809008955075165646918724845941430) .* 0.5
    i == 20 && return (-0.69438809008955075165646918724845941430,  -0.69438809008955075165646918724845941430) .* 0.5
    i == 21 && return ( 0.45768299288315551760664997201644894176,   0.45768299288315551760664997201644894176) .* 0.5
    i == 22 && return ( 0.45768299288315551760664997201644894176,  -0.45768299288315551760664997201644894176) .* 0.5
    i == 23 && return (-0.45768299288315551760664997201644894176,   0.45768299288315551760664997201644894176) .* 0.5
    i == 24 && return (-0.45768299288315551760664997201644894176,  -0.45768299288315551760664997201644894176) .* 0.5
    i == 25 && return ( 0.96920425609150873396809064886215595774,   0.96920425609150873396809064886215595774) .* 0.5
    i == 26 && return ( 0.96920425609150873396809064886215595774,  -0.96920425609150873396809064886215595774) .* 0.5
    i == 27 && return (-0.96920425609150873396809064886215595774,   0.96920425609150873396809064886215595774) .* 0.5
    i == 28 && return (-0.96920425609150873396809064886215595774,  -0.96920425609150873396809064886215595774) .* 0.5
    i == 29 && return ( 0.76208827608019827579179765943659247047,   0.27947776671519215001028373596083402351) .* 0.5
    i == 30 && return ( 0.27947776671519215001028373596083402351,   0.76208827608019827579179765943659247047) .* 0.5
    i == 31 && return ( 0.76208827608019827579179765943659247047,  -0.27947776671519215001028373596083402351) .* 0.5
    i == 32 && return (-0.27947776671519215001028373596083402351,   0.76208827608019827579179765943659247047) .* 0.5
    i == 33 && return (-0.76208827608019827579179765943659247047,   0.27947776671519215001028373596083402351) .* 0.5
    i == 34 && return ( 0.27947776671519215001028373596083402351,  -0.76208827608019827579179765943659247047) .* 0.5
    i == 35 && return (-0.76208827608019827579179765943659247047,  -0.27947776671519215001028373596083402351) .* 0.5
    i == 36 && return (-0.27947776671519215001028373596083402351,  -0.76208827608019827579179765943659247047) .* 0.5
    i == 37 && return ( 0.90739435219822367070405059478846671310,   0.54689867041431010640112807851437665884) .* 0.5
    i == 38 && return ( 0.54689867041431010640112807851437665884,   0.90739435219822367070405059478846671310) .* 0.5
    i == 39 && return ( 0.90739435219822367070405059478846671310,  -0.54689867041431010640112807851437665884) .* 0.5
    i == 40 && return (-0.54689867041431010640112807851437665884,   0.90739435219822367070405059478846671310) .* 0.5
    i == 41 && return (-0.90739435219822367070405059478846671310,   0.54689867041431010640112807851437665884) .* 0.5
    i == 42 && return ( 0.54689867041431010640112807851437665884,  -0.90739435219822367070405059478846671310) .* 0.5
    i == 43 && return (-0.90739435219822367070405059478846671310,  -0.54689867041431010640112807851437665884) .* 0.5
    i == 44 && return (-0.54689867041431010640112807851437665884,  -0.90739435219822367070405059478846671310) .* 0.5
    i == 45 && return ( 0.76124866643908275965614948240512547767,   0.98378797150154955261318330664974572171) .* 0.5
    i == 46 && return ( 0.98378797150154955261318330664974572171,   0.76124866643908275965614948240512547767) .* 0.5
    i == 47 && return ( 0.76124866643908275965614948240512547767,  -0.98378797150154955261318330664974572171) .* 0.5
    i == 48 && return (-0.98378797150154955261318330664974572171,   0.76124866643908275965614948240512547767) .* 0.5
    i == 49 && return (-0.76124866643908275965614948240512547767,   0.98378797150154955261318330664974572171) .* 0.5
    i == 50 && return ( 0.98378797150154955261318330664974572171,  -0.76124866643908275965614948240512547767) .* 0.5
    i == 51 && return (-0.76124866643908275965614948240512547767,  -0.98378797150154955261318330664974572171) .* 0.5
    i == 52 && return (-0.98378797150154955261318330664974572171,  -0.76124866643908275965614948240512547767) .* 0.5
    i == 53 && return ( 0.98709470704476782545682633278929030710,   0.30280748178886139816768835788736238796) .* 0.5
    i == 54 && return ( 0.30280748178886139816768835788736238796,   0.98709470704476782545682633278929030710) .* 0.5
    i == 55 && return ( 0.98709470704476782545682633278929030710,  -0.30280748178886139816768835788736238796) .* 0.5
    i == 56 && return (-0.30280748178886139816768835788736238796,   0.98709470704476782545682633278929030710) .* 0.5
    i == 57 && return (-0.98709470704476782545682633278929030710,   0.30280748178886139816768835788736238796) .* 0.5
    i == 58 && return ( 0.30280748178886139816768835788736238796,  -0.98709470704476782545682633278929030710) .* 0.5
    i == 59 && return (-0.98709470704476782545682633278929030710,  -0.30280748178886139816768835788736238796) .* 0.5
    i == 60 && return (-0.30280748178886139816768835788736238796,  -0.98709470704476782545682633278929030710) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{17} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 18 ---------------------------
# Number of points: 72

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{18}) = 72

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{18}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(19), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{18}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(19), i)
end

# --------------------------- Strength φ = 19 ---------------------------
# Number of points: 72

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{19}) = 72

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{19}, i::Integer)::Float64
    i ==  1 && return 0.09773736469282874824351835078552754304 * 0.25
    i ==  2 && return 0.09773736469282874824351835078552754304 * 0.25
    i ==  3 && return 0.09773736469282874824351835078552754304 * 0.25
    i ==  4 && return 0.09773736469282874824351835078552754304 * 0.25
    i ==  5 && return 0.13930761292248224570420924010933858068 * 0.25
    i ==  6 && return 0.13930761292248224570420924010933858068 * 0.25
    i ==  7 && return 0.13930761292248224570420924010933858068 * 0.25
    i ==  8 && return 0.13930761292248224570420924010933858068 * 0.25
    i ==  9 && return 0.03486958349188791000216241469073329113 * 0.25
    i == 10 && return 0.03486958349188791000216241469073329113 * 0.25
    i == 11 && return 0.03486958349188791000216241469073329113 * 0.25
    i == 12 && return 0.03486958349188791000216241469073329113 * 0.25
    i == 13 && return 0.04780454716279579479500483311146926753 * 0.25
    i == 14 && return 0.04780454716279579479500483311146926753 * 0.25
    i == 15 && return 0.04780454716279579479500483311146926753 * 0.25
    i == 16 && return 0.04780454716279579479500483311146926753 * 0.25
    i == 17 && return 0.00161771517791176081099274506032840349 * 0.25
    i == 18 && return 0.00161771517791176081099274506032840349 * 0.25
    i == 19 && return 0.00161771517791176081099274506032840349 * 0.25
    i == 20 && return 0.00161771517791176081099274506032840349 * 0.25
    i == 21 && return 0.01744104803435576246409842435979821408 * 0.25
    i == 22 && return 0.01744104803435576246409842435979821408 * 0.25
    i == 23 && return 0.01744104803435576246409842435979821408 * 0.25
    i == 24 && return 0.01744104803435576246409842435979821408 * 0.25
    i == 25 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 26 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 27 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 28 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 29 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 30 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 31 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 32 && return 0.11772583284005608002278985852480623731 * 0.25
    i == 33 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 34 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 35 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 36 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 37 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 38 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 39 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 40 && return 0.01617957761165784978965884124895398250 * 0.25
    i == 41 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 42 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 43 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 44 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 45 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 46 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 47 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 48 && return 0.08284661898340489394081347271111379050 * 0.25
    i == 49 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 50 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 51 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 52 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 53 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 54 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 55 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 56 && return 0.06498908149259604607905980076681561216 * 0.25
    i == 57 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 58 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 59 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 60 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 61 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 62 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 63 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 64 && return 0.03898055239641053477639662170386859580 * 0.25
    i == 65 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 66 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 67 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 68 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 69 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 70 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 71 && return 0.00988940093474348438128840098584413175 * 0.25
    i == 72 && return 0.00988940093474348438128840098584413175 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{19} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{19}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.71434425957279423719800751930789820023,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.00000000000000000000000000000000000000,   0.71434425957279423719800751930789820023) .* 0.5
    i ==  3 && return (-0.71434425957279423719800751930789820023,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  4 && return ( 0.00000000000000000000000000000000000000,  -0.71434425957279423719800751930789820023) .* 0.5
    i ==  5 && return ( 0.26567205212096375634521276949089468244,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  6 && return ( 0.00000000000000000000000000000000000000,   0.26567205212096375634521276949089468244) .* 0.5
    i ==  7 && return (-0.26567205212096375634521276949089468244,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  8 && return ( 0.00000000000000000000000000000000000000,  -0.26567205212096375634521276949089468244) .* 0.5
    i ==  9 && return ( 0.96443426925796725147589833453960979520,   0.00000000000000000000000000000000000000) .* 0.5
    i == 10 && return ( 0.00000000000000000000000000000000000000,   0.96443426925796725147589833453960979520) .* 0.5
    i == 11 && return (-0.96443426925796725147589833453960979520,   0.00000000000000000000000000000000000000) .* 0.5
    i == 12 && return ( 0.00000000000000000000000000000000000000,  -0.96443426925796725147589833453960979520) .* 0.5
    i == 13 && return ( 0.80337972946768500184569945317555062404,   0.80337972946768500184569945317555062404) .* 0.5
    i == 14 && return ( 0.80337972946768500184569945317555062404,  -0.80337972946768500184569945317555062404) .* 0.5
    i == 15 && return (-0.80337972946768500184569945317555062404,   0.80337972946768500184569945317555062404) .* 0.5
    i == 16 && return (-0.80337972946768500184569945317555062404,  -0.80337972946768500184569945317555062404) .* 0.5
    i == 17 && return ( 0.99216540589713472189744527407633022081,   0.99216540589713472189744527407633022081) .* 0.5
    i == 18 && return ( 0.99216540589713472189744527407633022081,  -0.99216540589713472189744527407633022081) .* 0.5
    i == 19 && return (-0.99216540589713472189744527407633022081,   0.99216540589713472189744527407633022081) .* 0.5
    i == 20 && return (-0.99216540589713472189744527407633022081,  -0.99216540589713472189744527407633022081) .* 0.5
    i == 21 && return ( 0.92944960279960938592453972561789815525,   0.92944960279960938592453972561789815525) .* 0.5
    i == 22 && return ( 0.92944960279960938592453972561789815525,  -0.92944960279960938592453972561789815525) .* 0.5
    i == 23 && return (-0.92944960279960938592453972561789815525,   0.92944960279960938592453972561789815525) .* 0.5
    i == 24 && return (-0.92944960279960938592453972561789815525,  -0.92944960279960938592453972561789815525) .* 0.5
    i == 25 && return ( 0.51027825736934335058280520856084337461,   0.26664031459456217566653623598727229551) .* 0.5
    i == 26 && return ( 0.26664031459456217566653623598727229551,   0.51027825736934335058280520856084337461) .* 0.5
    i == 27 && return ( 0.51027825736934335058280520856084337461,  -0.26664031459456217566653623598727229551) .* 0.5
    i == 28 && return (-0.26664031459456217566653623598727229551,   0.51027825736934335058280520856084337461) .* 0.5
    i == 29 && return (-0.51027825736934335058280520856084337461,   0.26664031459456217566653623598727229551) .* 0.5
    i == 30 && return ( 0.26664031459456217566653623598727229551,  -0.51027825736934335058280520856084337461) .* 0.5
    i == 31 && return (-0.51027825736934335058280520856084337461,  -0.26664031459456217566653623598727229551) .* 0.5
    i == 32 && return (-0.26664031459456217566653623598727229551,  -0.51027825736934335058280520856084337461) .* 0.5
    i == 33 && return ( 0.39073420577524975124346417118562879486,   0.98789293314173530957079377090965768822) .* 0.5
    i == 34 && return ( 0.98789293314173530957079377090965768822,   0.39073420577524975124346417118562879486) .* 0.5
    i == 35 && return ( 0.39073420577524975124346417118562879486,  -0.98789293314173530957079377090965768822) .* 0.5
    i == 36 && return (-0.98789293314173530957079377090965768822,   0.39073420577524975124346417118562879486) .* 0.5
    i == 37 && return (-0.39073420577524975124346417118562879486,   0.98789293314173530957079377090965768822) .* 0.5
    i == 38 && return ( 0.98789293314173530957079377090965768822,  -0.39073420577524975124346417118562879486) .* 0.5
    i == 39 && return (-0.39073420577524975124346417118562879486,  -0.98789293314173530957079377090965768822) .* 0.5
    i == 40 && return (-0.98789293314173530957079377090965768822,  -0.39073420577524975124346417118562879486) .* 0.5
    i == 41 && return ( 0.71716792130974519606308556126612093997,   0.51249187721609765575479280145710018395) .* 0.5
    i == 42 && return ( 0.51249187721609765575479280145710018395,   0.71716792130974519606308556126612093997) .* 0.5
    i == 43 && return ( 0.71716792130974519606308556126612093997,  -0.51249187721609765575479280145710018395) .* 0.5
    i == 44 && return (-0.51249187721609765575479280145710018395,   0.71716792130974519606308556126612093997) .* 0.5
    i == 45 && return (-0.71716792130974519606308556126612093997,   0.51249187721609765575479280145710018395) .* 0.5
    i == 46 && return ( 0.51249187721609765575479280145710018395,  -0.71716792130974519606308556126612093997) .* 0.5
    i == 47 && return (-0.71716792130974519606308556126612093997,  -0.51249187721609765575479280145710018395) .* 0.5
    i == 48 && return (-0.51249187721609765575479280145710018395,  -0.71716792130974519606308556126612093997) .* 0.5
    i == 49 && return ( 0.26544000781129599607199705861535014970,   0.86890243415450423858119610210847838329) .* 0.5
    i == 50 && return ( 0.86890243415450423858119610210847838329,   0.26544000781129599607199705861535014970) .* 0.5
    i == 51 && return ( 0.26544000781129599607199705861535014970,  -0.86890243415450423858119610210847838329) .* 0.5
    i == 52 && return (-0.86890243415450423858119610210847838329,   0.26544000781129599607199705861535014970) .* 0.5
    i == 53 && return (-0.26544000781129599607199705861535014970,   0.86890243415450423858119610210847838329) .* 0.5
    i == 54 && return ( 0.86890243415450423858119610210847838329,  -0.26544000781129599607199705861535014970) .* 0.5
    i == 55 && return (-0.26544000781129599607199705861535014970,  -0.86890243415450423858119610210847838329) .* 0.5
    i == 56 && return (-0.86890243415450423858119610210847838329,  -0.26544000781129599607199705861535014970) .* 0.5
    i == 57 && return ( 0.62003539869325639760371263809929928256,   0.92630295580712924244748529919286127317) .* 0.5
    i == 58 && return ( 0.92630295580712924244748529919286127317,   0.62003539869325639760371263809929928256) .* 0.5
    i == 59 && return ( 0.62003539869325639760371263809929928256,  -0.92630295580712924244748529919286127317) .* 0.5
    i == 60 && return (-0.92630295580712924244748529919286127317,   0.62003539869325639760371263809929928256) .* 0.5
    i == 61 && return (-0.62003539869325639760371263809929928256,   0.92630295580712924244748529919286127317) .* 0.5
    i == 62 && return ( 0.92630295580712924244748529919286127317,  -0.62003539869325639760371263809929928256) .* 0.5
    i == 63 && return (-0.62003539869325639760371263809929928256,  -0.92630295580712924244748529919286127317) .* 0.5
    i == 64 && return (-0.92630295580712924244748529919286127317,  -0.62003539869325639760371263809929928256) .* 0.5
    i == 65 && return ( 0.80167158471859684259236358940451923912,   0.98844653068397375168746156789890756035) .* 0.5
    i == 66 && return ( 0.98844653068397375168746156789890756035,   0.80167158471859684259236358940451923912) .* 0.5
    i == 67 && return ( 0.80167158471859684259236358940451923912,  -0.98844653068397375168746156789890756035) .* 0.5
    i == 68 && return (-0.98844653068397375168746156789890756035,   0.80167158471859684259236358940451923912) .* 0.5
    i == 69 && return (-0.80167158471859684259236358940451923912,   0.98844653068397375168746156789890756035) .* 0.5
    i == 70 && return ( 0.98844653068397375168746156789890756035,  -0.80167158471859684259236358940451923912) .* 0.5
    i == 71 && return (-0.80167158471859684259236358940451923912,  -0.98844653068397375168746156789890756035) .* 0.5
    i == 72 && return (-0.98844653068397375168746156789890756035,  -0.80167158471859684259236358940451923912) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{19} in AbstractQuadrilateral"))
end

# --------------------------- Strength φ = 20 ---------------------------
# Number of points: 85

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{20}) = 85

function quadweight(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{20}, i::Integer)::Float64
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadweight(s, GaussQuadrature(21), i)::Float64
end

function quadpoint(s::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{20}, i::Integer)::SVector{2, Float64}
    # Same number of points as higher strength rule.
    # Use higher strength rule instead.
    quadpoint(s, GaussQuadrature(21), i)
end

# --------------------------- Strength φ = 21 ---------------------------
# Number of points: 85

nquadpoints(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{21}) = 85

function quadweight(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{21}, i::Integer)::Float64
    i ==  1 && return 0.13519284035614282527922840385434746149 * 0.25
    i ==  2 && return 0.10679415878594038250375421488295668420 * 0.25
    i ==  3 && return 0.10679415878594038250375421488295668420 * 0.25
    i ==  4 && return 0.10679415878594038250375421488295668420 * 0.25
    i ==  5 && return 0.10679415878594038250375421488295668420 * 0.25
    i ==  6 && return 0.06625720800494438515903105902012244034 * 0.25
    i ==  7 && return 0.06625720800494438515903105902012244034 * 0.25
    i ==  8 && return 0.06625720800494438515903105902012244034 * 0.25
    i ==  9 && return 0.06625720800494438515903105902012244034 * 0.25
    i == 10 && return 0.11988448364634046970472217835662908028 * 0.25
    i == 11 && return 0.11988448364634046970472217835662908028 * 0.25
    i == 12 && return 0.11988448364634046970472217835662908028 * 0.25
    i == 13 && return 0.11988448364634046970472217835662908028 * 0.25
    i == 14 && return 0.00822946128922000882822171172548957840 * 0.25
    i == 15 && return 0.00822946128922000882822171172548957840 * 0.25
    i == 16 && return 0.00822946128922000882822171172548957840 * 0.25
    i == 17 && return 0.00822946128922000882822171172548957840 * 0.25
    i == 18 && return 0.03060364092877565103814115570476880668 * 0.25
    i == 19 && return 0.03060364092877565103814115570476880668 * 0.25
    i == 20 && return 0.03060364092877565103814115570476880668 * 0.25
    i == 21 && return 0.03060364092877565103814115570476880668 * 0.25
    i == 22 && return 0.09679179189359521084249771112783375661 * 0.25
    i == 23 && return 0.09679179189359521084249771112783375661 * 0.25
    i == 24 && return 0.09679179189359521084249771112783375661 * 0.25
    i == 25 && return 0.09679179189359521084249771112783375661 * 0.25
    i == 26 && return 0.06151634148131656120174994400996158651 * 0.25
    i == 27 && return 0.06151634148131656120174994400996158651 * 0.25
    i == 28 && return 0.06151634148131656120174994400996158651 * 0.25
    i == 29 && return 0.06151634148131656120174994400996158651 * 0.25
    i == 30 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 31 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 32 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 33 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 34 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 35 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 36 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 37 && return 0.08672849951320822490393669699955292675 * 0.25
    i == 38 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 39 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 40 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 41 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 42 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 43 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 44 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 45 && return 0.05587911740412734806304785820411782729 * 0.25
    i == 46 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 47 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 48 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 49 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 50 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 51 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 52 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 53 && return 0.03712882744091381765333071895487696092 * 0.25
    i == 54 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 55 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 56 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 57 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 58 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 59 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 60 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 61 && return 0.02877560085102053176757936762694076598 * 0.25
    i == 62 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 63 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 64 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 65 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 66 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 67 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 68 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 69 && return 0.01150952044249316757826113830818846085 * 0.25
    i == 70 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 71 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 72 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 73 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 74 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 75 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 76 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 77 && return 0.00752848213040164570912493993633174489 * 0.25
    i == 78 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 79 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 80 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 81 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 82 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 83 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 84 && return 0.01051230415825107652575674207431691411 * 0.25
    i == 85 && return 0.01051230415825107652575674207431691411 * 0.25
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{21} in AbstractQuadrilateral"))
end

function quadpoint(::Type{<:AbstractQuadrilateral}, ::GaussQuadrature{21}, i::Integer)::SVector{2, Float64}
    i ==  1 && return ( 0.00000000000000000000000000000000000000,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  2 && return ( 0.47335107435822415202690901838844666219,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  3 && return ( 0.00000000000000000000000000000000000000,   0.47335107435822415202690901838844666219) .* 0.5
    i ==  4 && return (-0.47335107435822415202690901838844666219,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  5 && return ( 0.00000000000000000000000000000000000000,  -0.47335107435822415202690901838844666219) .* 0.5
    i ==  6 && return ( 0.83527842975586830160520893009495292054,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  7 && return ( 0.00000000000000000000000000000000000000,   0.83527842975586830160520893009495292054) .* 0.5
    i ==  8 && return (-0.83527842975586830160520893009495292054,   0.00000000000000000000000000000000000000) .* 0.5
    i ==  9 && return ( 0.00000000000000000000000000000000000000,  -0.83527842975586830160520893009495292054) .* 0.5
    i == 10 && return ( 0.25737190060722898190537552133176369190,   0.25737190060722898190537552133176369190) .* 0.5
    i == 11 && return ( 0.25737190060722898190537552133176369190,  -0.25737190060722898190537552133176369190) .* 0.5
    i == 12 && return (-0.25737190060722898190537552133176369190,   0.25737190060722898190537552133176369190) .* 0.5
    i == 13 && return (-0.25737190060722898190537552133176369190,  -0.25737190060722898190537552133176369190) .* 0.5
    i == 14 && return ( 0.96333783211562335381484352624945730322,   0.96333783211562335381484352624945730322) .* 0.5
    i == 15 && return ( 0.96333783211562335381484352624945730322,  -0.96333783211562335381484352624945730322) .* 0.5
    i == 16 && return (-0.96333783211562335381484352624945730322,   0.96333783211562335381484352624945730322) .* 0.5
    i == 17 && return (-0.96333783211562335381484352624945730322,  -0.96333783211562335381484352624945730322) .* 0.5
    i == 18 && return ( 0.86245192537965155140267607631968215083,   0.86245192537965155140267607631968215083) .* 0.5
    i == 19 && return ( 0.86245192537965155140267607631968215083,  -0.86245192537965155140267607631968215083) .* 0.5
    i == 20 && return (-0.86245192537965155140267607631968215083,   0.86245192537965155140267607631968215083) .* 0.5
    i == 21 && return (-0.86245192537965155140267607631968215083,  -0.86245192537965155140267607631968215083) .* 0.5
    i == 22 && return ( 0.49689796251934570364793617005129236026,   0.49689796251934570364793617005129236026) .* 0.5
    i == 23 && return ( 0.49689796251934570364793617005129236026,  -0.49689796251934570364793617005129236026) .* 0.5
    i == 24 && return (-0.49689796251934570364793617005129236026,   0.49689796251934570364793617005129236026) .* 0.5
    i == 25 && return (-0.49689796251934570364793617005129236026,  -0.49689796251934570364793617005129236026) .* 0.5
    i == 26 && return ( 0.70433217519540056955932591780080720749,   0.70433217519540056955932591780080720749) .* 0.5
    i == 27 && return ( 0.70433217519540056955932591780080720749,  -0.70433217519540056955932591780080720749) .* 0.5
    i == 28 && return (-0.70433217519540056955932591780080720749,   0.70433217519540056955932591780080720749) .* 0.5
    i == 29 && return (-0.70433217519540056955932591780080720749,  -0.70433217519540056955932591780080720749) .* 0.5
    i == 30 && return ( 0.24187818547670197670997054949192246819,   0.67414621995531773950245618191533516236) .* 0.5
    i == 31 && return ( 0.67414621995531773950245618191533516236,   0.24187818547670197670997054949192246819) .* 0.5
    i == 32 && return ( 0.24187818547670197670997054949192246819,  -0.67414621995531773950245618191533516236) .* 0.5
    i == 33 && return (-0.67414621995531773950245618191533516236,   0.24187818547670197670997054949192246819) .* 0.5
    i == 34 && return (-0.24187818547670197670997054949192246819,   0.67414621995531773950245618191533516236) .* 0.5
    i == 35 && return ( 0.67414621995531773950245618191533516236,  -0.24187818547670197670997054949192246819) .* 0.5
    i == 36 && return (-0.24187818547670197670997054949192246819,  -0.67414621995531773950245618191533516236) .* 0.5
    i == 37 && return (-0.67414621995531773950245618191533516236,  -0.24187818547670197670997054949192246819) .* 0.5
    i == 38 && return ( 0.48015696631279513715726389107913072158,   0.82464737527092073827881221191700729562) .* 0.5
    i == 39 && return ( 0.82464737527092073827881221191700729562,   0.48015696631279513715726389107913072158) .* 0.5
    i == 40 && return ( 0.48015696631279513715726389107913072158,  -0.82464737527092073827881221191700729562) .* 0.5
    i == 41 && return (-0.82464737527092073827881221191700729562,   0.48015696631279513715726389107913072158) .* 0.5
    i == 42 && return (-0.48015696631279513715726389107913072158,   0.82464737527092073827881221191700729562) .* 0.5
    i == 43 && return ( 0.82464737527092073827881221191700729562,  -0.48015696631279513715726389107913072158) .* 0.5
    i == 44 && return (-0.48015696631279513715726389107913072158,  -0.82464737527092073827881221191700729562) .* 0.5
    i == 45 && return (-0.82464737527092073827881221191700729562,  -0.48015696631279513715726389107913072158) .* 0.5
    i == 46 && return ( 0.93224193592175396207500211941993080129,   0.27069918410166491089101469370373344757) .* 0.5
    i == 47 && return ( 0.27069918410166491089101469370373344757,   0.93224193592175396207500211941993080129) .* 0.5
    i == 48 && return ( 0.93224193592175396207500211941993080129,  -0.27069918410166491089101469370373344757) .* 0.5
    i == 49 && return (-0.27069918410166491089101469370373344757,   0.93224193592175396207500211941993080129) .* 0.5
    i == 50 && return (-0.93224193592175396207500211941993080129,   0.27069918410166491089101469370373344757) .* 0.5
    i == 51 && return ( 0.27069918410166491089101469370373344757,  -0.93224193592175396207500211941993080129) .* 0.5
    i == 52 && return (-0.93224193592175396207500211941993080129,  -0.27069918410166491089101469370373344757) .* 0.5
    i == 53 && return (-0.27069918410166491089101469370373344757,  -0.93224193592175396207500211941993080129) .* 0.5
    i == 54 && return ( 0.93490232582401054613354438740771124115,   0.67503956743707526937208896355984125883) .* 0.5
    i == 55 && return ( 0.67503956743707526937208896355984125883,   0.93490232582401054613354438740771124115) .* 0.5
    i == 56 && return ( 0.93490232582401054613354438740771124115,  -0.67503956743707526937208896355984125883) .* 0.5
    i == 57 && return (-0.67503956743707526937208896355984125883,   0.93490232582401054613354438740771124115) .* 0.5
    i == 58 && return (-0.93490232582401054613354438740771124115,   0.67503956743707526937208896355984125883) .* 0.5
    i == 59 && return ( 0.67503956743707526937208896355984125883,  -0.93490232582401054613354438740771124115) .* 0.5
    i == 60 && return (-0.93490232582401054613354438740771124115,  -0.67503956743707526937208896355984125883) .* 0.5
    i == 61 && return (-0.67503956743707526937208896355984125883,  -0.93490232582401054613354438740771124115) .* 0.5
    i == 62 && return ( 0.99045546752952415272197458895882111757,   0.48891625117716687937811887553934444444) .* 0.5
    i == 63 && return ( 0.48891625117716687937811887553934444444,   0.99045546752952415272197458895882111757) .* 0.5
    i == 64 && return ( 0.99045546752952415272197458895882111757,  -0.48891625117716687937811887553934444444) .* 0.5
    i == 65 && return (-0.48891625117716687937811887553934444444,   0.99045546752952415272197458895882111757) .* 0.5
    i == 66 && return (-0.99045546752952415272197458895882111757,   0.48891625117716687937811887553934444444) .* 0.5
    i == 67 && return ( 0.48891625117716687937811887553934444444,  -0.99045546752952415272197458895882111757) .* 0.5
    i == 68 && return (-0.99045546752952415272197458895882111757,  -0.48891625117716687937811887553934444444) .* 0.5
    i == 69 && return (-0.48891625117716687937811887553934444444,  -0.99045546752952415272197458895882111757) .* 0.5
    i == 70 && return ( 0.83113524597590138585974389212898407353,   0.98896061138657239166243578378631145048) .* 0.5
    i == 71 && return ( 0.98896061138657239166243578378631145048,   0.83113524597590138585974389212898407353) .* 0.5
    i == 72 && return ( 0.83113524597590138585974389212898407353,  -0.98896061138657239166243578378631145048) .* 0.5
    i == 73 && return (-0.98896061138657239166243578378631145048,   0.83113524597590138585974389212898407353) .* 0.5
    i == 74 && return (-0.83113524597590138585974389212898407353,   0.98896061138657239166243578378631145048) .* 0.5
    i == 75 && return ( 0.98896061138657239166243578378631145048,  -0.83113524597590138585974389212898407353) .* 0.5
    i == 76 && return (-0.83113524597590138585974389212898407353,  -0.98896061138657239166243578378631145048) .* 0.5
    i == 77 && return (-0.98896061138657239166243578378631145048,  -0.83113524597590138585974389212898407353) .* 0.5
    i == 78 && return ( 0.09146960092229129666844382857347188095,   0.98401714848959892866013755872564589893) .* 0.5
    i == 79 && return ( 0.98401714848959892866013755872564589893,   0.09146960092229129666844382857347188095) .* 0.5
    i == 80 && return ( 0.09146960092229129666844382857347188095,  -0.98401714848959892866013755872564589893) .* 0.5
    i == 81 && return (-0.98401714848959892866013755872564589893,   0.09146960092229129666844382857347188095) .* 0.5
    i == 82 && return (-0.09146960092229129666844382857347188095,   0.98401714848959892866013755872564589893) .* 0.5
    i == 83 && return ( 0.98401714848959892866013755872564589893,  -0.09146960092229129666844382857347188095) .* 0.5
    i == 84 && return (-0.09146960092229129666844382857347188095,  -0.98401714848959892866013755872564589893) .* 0.5
    i == 85 && return (-0.98401714848959892866013755872564589893,  -0.09146960092229129666844382857347188095) .* 0.5
    throw(ArgumentError("no quadrature point $i for GaussQuadrature{21} in AbstractQuadrilateral"))
end
